package main

import (
	"fmt"
	"strings"
	"text/template"
)

var (
	readerBranchTmpl                = template.Must(template.New("readerBranch").Parse(readerBranch))
	stringOrReaderBranchTmpl        = template.Must(template.New("stringOrReaderBranch").Parse(stringOrReaderBranch))
	inputMediaParamsBranchTmpl      = template.Must(template.New("inputMediaParamsBranch").Parse(inputMediaParamsBranch))
	inputMediaArrayParamsBranchTmpl = template.Must(template.New("inputMediaArrayParamsBranch").Parse(inputMediaArrayParamsBranch))
)

func generateMethods(d APIDescription) error {
	file := strings.Builder{}
	file.WriteString(`
// THIS FILE IS AUTOGENERATED. DO NOT EDIT.
// Regen by running 'go generate' in the repo root.

package gotgbot

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io"
	urlLib "net/url" // renamed to avoid clashes with url vars
	"strconv"
)
`)

	for _, tgMethodName := range orderedMethods(d) {
		tgMethod := d.Methods[tgMethodName]

		method, err := generateMethodDef(d, tgMethod)
		if err != nil {
			return fmt.Errorf("failed to generate method definition of %s: %w", tgMethodName, err)
		}

		file.WriteString(method)
	}

	return writeGenToFile(file, "gen_methods.go")
}

func generateMethodDef(d APIDescription, tgMethod MethodDescription) (string, error) {
	method := strings.Builder{}

	retType, err := tgMethod.GetReturnType(d)
	if err != nil {
		return "", fmt.Errorf("failed to get return for %s: %w", tgMethod.Name, err)
	}

	defaultRetVal := getDefaultReturnVal(d, retType)

	args, optionalsStruct, err := tgMethod.getArgs()
	if err != nil {
		return "", fmt.Errorf("failed to get args for method %s: %w", tgMethod.Name, err)
	}

	if optionalsStruct != "" {
		method.WriteString("\n" + optionalsStruct)
	}

	desc, err := tgMethod.description()
	if err != nil {
		return "", fmt.Errorf("failed to generate method description for %s: %w", tgMethod.Name, err)
	}

	valueGen, hasData, err := tgMethod.argsToValues(d, defaultRetVal)
	if err != nil {
		return "", fmt.Errorf("failed to generate url values for method %s: %w", tgMethod.Name, err)
	}

	method.WriteString(desc)
	method.WriteString("\nfunc (bot *Bot) " + strings.Title(tgMethod.Name) + "(" + args + ") (" + retType + ", error) {")
	method.WriteString("\n	v := urlLib.Values{}")

	if hasData {
		method.WriteString("\n	data := map[string]NamedReader{}")
	}

	method.WriteString(valueGen)
	method.WriteString("\n")

	if hasData {
		method.WriteString("\nr, err := bot.Post(\"" + tgMethod.Name + "\", v, data)")
	} else {
		method.WriteString("\nr, err := bot.Get(\"" + tgMethod.Name + "\", v)")
	}

	method.WriteString("\n	if err != nil {")
	method.WriteString("\n		return " + defaultRetVal + ", err")
	method.WriteString("\n	}")
	method.WriteString("\n")

	retVarType := retType
	retVarName := getRetVarName(retVarType)
	isPointer := strings.HasPrefix(retVarType, "*")
	addr := ""
	if isPointer {
		retVarType = strings.TrimLeft(retVarType, "*")
		addr = "&"
	}

	if rawType := strings.TrimPrefix(retType, "[]"); isArray(retType) && len(d.Types[rawType].Subtypes) != 0 {
		// Handle interface array returns such as []ChatMember from GetChatAdministrators
		method.WriteString(fmt.Sprintf("\nreturn unmarshal%sArray(r)", rawType))
	} else if len(d.Types[retType].Subtypes) != 0 {
		// Handle interface returns such as ChatMember from GetChatMember
		method.WriteString(fmt.Sprintf("\nreturn unmarshal%s(r)", retType))
	} else {
		method.WriteString("\nvar " + retVarName + " " + retVarType)
		method.WriteString("\nreturn " + addr + retVarName + ", json.Unmarshal(r, &" + retVarName + ")")
	}
	method.WriteString("\n}")

	return method.String(), nil
}

func (m MethodDescription) description() (string, error) {
	description := strings.Builder{}
	hasOptionals := false

	for idx, d := range m.Description {
		text := d
		if idx == 0 {
			text = strings.Title(m.Name) + " " + d
		}

		description.WriteString("\n// " + text)
	}

	for _, f := range m.Fields {
		if !f.Required {
			hasOptionals = true
			continue
		}

		prefType, err := f.getPreferredType()
		if err != nil {
			return "", err
		}

		description.WriteString("\n// - " + f.Name + " (type " + prefType + "): " + f.Description)
	}

	if hasOptionals {
		description.WriteString("\n// - opts (type " + m.optsName() + "): All optional parameters.")
	}

	description.WriteString("\n// " + m.Href)

	return description.String(), nil
}

func (m MethodDescription) argsToValues(d APIDescription, defaultRetVal string) (string, bool, error) {
	hasData := false
	bd := strings.Builder{}

	var optionals []Field
	for _, f := range m.Fields {
		goParam := snakeToCamel(f.Name)
		if !f.Required {
			optionals = append(optionals, f)
			continue
		}

		contents, data, err := generateValue(d, f, goParam, defaultRetVal)
		if err != nil {
			return "", false, err
		}
		bd.WriteString(contents)
		hasData = hasData || data
	}

	if len(optionals) > 0 {
		bd.WriteString("\nif opts != nil {")
		for _, f := range optionals {
			goParam := "opts." + snakeToTitle(f.Name)
			contents, data, err := generateValue(d, f, goParam, defaultRetVal)
			if err != nil {
				return "", false, err
			}

			bd.WriteString(contents)
			hasData = hasData || data
		}
		bd.WriteString("\n}")
	}

	return bd.String(), hasData, nil
}

func generateValue(d APIDescription, f Field, goParam string, defaultRetVal string) (string, bool, error) {
	fieldType, err := f.getPreferredType()
	if err != nil {
		return "", false, fmt.Errorf("failed to get preferred type: %w", err)
	}

	stringer := goTypeStringer(fieldType)
	if stringer != "" {
		addParam := fmt.Sprintf(`v.Add("%s", %s)`, f.Name, fmt.Sprintf(stringer, goParam))
		if !f.Required && (fieldType == "int64" || fieldType == "float64") {
			// Editing an inline query requires the inline_message_id. However, if we send the empty chat_id with it,
			// it'll fail with a "chat not found" error, since it believes were trying to access the chat with ID 0.
			// To avoid this, we want to make sure not to add default integers or floats to requests.
			return fmt.Sprintf(`
if %s != %s {
	%s
}`, goParam, getDefaultReturnVal(d, fieldType), addParam), false, nil
		}

		return "\n" + addParam, false, nil
	}

	bd := strings.Builder{}
	hasData := false
	switch fieldType {
	case tgTypeInputFile:
		hasData = true

		t := stringOrReaderBranchTmpl
		if len(f.Types) == 1 {
			// This is actually just an inputfile, not "InputFile or String", so don't support string
			t = readerBranchTmpl
		}

		err = t.Execute(&bd, readerBranchesData{
			GoParam:       goParam,
			DefaultReturn: defaultRetVal,
			Name:          f.Name,
		})
		if err != nil {
			return "", false, fmt.Errorf("failed to execute branch reader template: %w", err)
		}

	case tgTypeInputMedia:
		hasData = true

		err = inputMediaParamsBranchTmpl.Execute(&bd, readerBranchesData{
			GoParam:       goParam,
			DefaultReturn: defaultRetVal,
			Name:          f.Name,
		})
		if err != nil {
			return "", false, fmt.Errorf("failed to execute inputmedia branch template: %w", err)
		}

	case "[]InputMedia":
		hasData = true

		err = inputMediaArrayParamsBranchTmpl.Execute(&bd, readerBranchesData{
			GoParam:       goParam,
			DefaultReturn: defaultRetVal,
			Name:          f.Name,
		})
		if err != nil {
			return "", false, fmt.Errorf("failed to execute inputmedia array branch template: %w", err)
		}

	default:
		if isArray(fieldType) || fieldType == tgTypeReplyMarkup {
			bd.WriteString("\nif " + goParam + " != nil {")
		}

		bd.WriteString("\n	bs, err := json.Marshal(" + goParam + ")")
		bd.WriteString("\n	if err != nil {")
		bd.WriteString("\n		return " + defaultRetVal + ", fmt.Errorf(\"failed to marshal field " + f.Name + ": %w\", err)")
		bd.WriteString("\n	}")
		bd.WriteString("\n	v.Add(\"" + f.Name + "\", string(bs))")

		if isArray(fieldType) || fieldType == tgTypeReplyMarkup {
			bd.WriteString("\n}")
		}
	}
	return bd.String(), hasData, nil
}

func getRetVarName(retType string) string {
	for strings.HasPrefix(retType, "*") {
		retType = strings.TrimPrefix(retType, "*")
	}

	for strings.HasPrefix(retType, "[]") {
		retType = strings.TrimPrefix(retType, "[]")
	}

	return strings.ToLower(retType[:1])
}

func (m MethodDescription) getArgs() (string, string, error) {
	var requiredArgs []string
	optionals := strings.Builder{}

	for _, f := range m.Fields {
		fieldType, err := f.getPreferredType()
		if err != nil {
			return "", "", fmt.Errorf("failed to get preferred type: %w", err)
		}

		if f.Required {
			requiredArgs = append(requiredArgs, fmt.Sprintf("%s %s", snakeToCamel(f.Name), fieldType))
			continue
		}

		optionals.WriteString("\n// " + f.Description)
		optionals.WriteString("\n" + fmt.Sprintf("%s %s", snakeToTitle(f.Name), fieldType))
	}

	optionalsStruct := ""

	if optionals.Len() > 0 {
		optionalsName := m.optsName()
		bd := strings.Builder{}
		bd.WriteString(fmt.Sprintf("\n// %s is the set of optional fields for Bot.%s.", optionalsName, strings.Title(m.Name)))
		bd.WriteString("\ntype " + optionalsName + " struct {")
		bd.WriteString(optionals.String())
		bd.WriteString("\n}")
		optionalsStruct = bd.String()

		requiredArgs = append(requiredArgs, fmt.Sprintf("opts *%s", optionalsName))
	}

	return strings.Join(requiredArgs, ", "), optionalsStruct, nil
}

type readerBranchesData struct {
	GoParam       string
	DefaultReturn string
	Name          string
}

const readerBranch = `
if {{.GoParam}} != nil {
	switch m := {{.GoParam}}.(type) {
	case NamedReader:
		v.Add("{{.Name}}", "attach://{{.Name}}")
		data["{{.Name}}"] = m

	case io.Reader:
		v.Add("{{.Name}}", "attach://{{.Name}}")
		data["{{.Name}}"] = NamedFile{File: m}

	case []byte:
		v.Add("{{.Name}}", "attach://{{.Name}}")
		data["{{.Name}}"] = NamedFile{File: bytes.NewReader(m)}

	default:
		return {{.DefaultReturn}}, fmt.Errorf("unknown type for InputFile: %T",{{.GoParam}})
	}
}`

const stringOrReaderBranch = `
if {{.GoParam}} != nil {
	switch m := {{.GoParam}}.(type) {
	case string:
		v.Add("{{.Name}}", m)

	case NamedReader:
		v.Add("{{.Name}}", "attach://{{.Name}}")
		data["{{.Name}}"] = m

	case io.Reader:
		v.Add("{{.Name}}", "attach://{{.Name}}")
		data["{{.Name}}"] = NamedFile{File: m}

	case []byte:
		v.Add("{{.Name}}", "attach://{{.Name}}")
		data["{{.Name}}"] = NamedFile{File: bytes.NewReader(m)}

	default:
		return {{.DefaultReturn}}, fmt.Errorf("unknown type for InputFile: %T",{{.GoParam}})
	}
}`

const inputMediaParamsBranch = `
inputMediaBs, err := {{.GoParam}}.InputMediaParams("{{.Name}}" , data)
if err != nil {
	return {{.DefaultReturn}}, fmt.Errorf("failed to marshal field {{.Name}}: %w", err)
}
v.Add("{{.Name}}", string(inputMediaBs))`

const inputMediaArrayParamsBranch = `
if {{.GoParam}} != nil {
	var rawList []json.RawMessage
	for idx, im := range {{.GoParam}} {
		inputMediaBs, err := im.InputMediaParams("{{.Name}}" + strconv.Itoa(idx), data)
		if err != nil {
			return {{.DefaultReturn}}, fmt.Errorf("failed to marshal InputMedia list item %d for field {{.Name}}: %w", idx, err)
		}
		rawList = append(rawList, inputMediaBs)
	}
	bs, err := json.Marshal(rawList)
	if err != nil {
		return {{.DefaultReturn}}, fmt.Errorf("failed to marshal raw json list of InputMedia for field: {{.Name}} %w", err)
	}
	v.Add("{{.Name}}", string(bs))
}`
