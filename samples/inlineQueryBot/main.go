package main

import (
	"fmt"
	"net/http"
	"os"

	"github.com/PaulSonOfLars/gotgbot/v2"
	"github.com/PaulSonOfLars/gotgbot/v2/ext"
	"github.com/PaulSonOfLars/gotgbot/v2/ext/handlers"
	"github.com/PaulSonOfLars/gotgbot/v2/ext/handlers/filters/inlinequery"
)

func main() {
	// Create bot from environment value.
	b, err := gotgbot.NewBot(os.Getenv("TOKEN"), &gotgbot.BotOpts{
		Client:      http.Client{},
		GetTimeout:  gotgbot.DefaultGetTimeout,
		PostTimeout: gotgbot.DefaultPostTimeout,
	})
	if err != nil {
		panic("failed to create new bot: " + err.Error())
	}

	// Create updater and dispatcher.
	updater := ext.NewUpdater(nil)
	dispatcher := updater.Dispatcher

	// Add echo handler to reply to all messages.
	dispatcher.AddHandler(handlers.NewCommand("start", start))
	dispatcher.AddHandler(handlers.NewInlineQuery(inlinequery.Query("gotgbot"), startIQ))

	// Start receiving updates.
	err = updater.StartPolling(b, &ext.PollingOpts{DropPendingUpdates: true})
	if err != nil {
		panic("failed to start polling: " + err.Error())
	}
	fmt.Printf("%s has been started...\n", b.User.Username)

	// Idle, to keep updates coming in, and avoid bot stopping.
	updater.Idle()
}

// start introduces the bot
func start(b *gotgbot.Bot, ctx *ext.Context) error {
	query := "gotgbot"
	_, err := ctx.EffectiveMessage.Reply(b, fmt.Sprintf("Hello, I'm @%s. I'm a sample bot for inline queries.", b.User.Username), &gotgbot.SendMessageOpts{
		ParseMode: "html",
		ReplyMarkup: gotgbot.InlineKeyboardMarkup{
			InlineKeyboard: [][]gotgbot.InlineKeyboardButton{{
				//A button to switch to inline query to current chat
				{Text: "Switch in current chat", SwitchInlineQueryCurrentChat: &query},
				{Text: "Switch in other chats", SwitchInlineQuery: &query},
			}},
		},
	})
	if err != nil {
		fmt.Println("failed to send: " + err.Error())
	}
	return nil
}

func startIQ(b *gotgbot.Bot, ctx *ext.Context) error {
	iq := ctx.InlineQuery
	result := []gotgbot.InlineQueryResult{
		gotgbot.InlineQueryResultArticle{
			Id:          iq.Id,
			Title:       "gotgbot",
			Description: "Autogenerated Go wrapper for the telegram API. Inspired by the python-telegram-bot library.",
			InputMessageContent: gotgbot.InputTextMessageContent{
				MessageText: "Press the following link to open gotgbot's github link.",
			},
			ReplyMarkup: &gotgbot.InlineKeyboardMarkup{
				InlineKeyboard: [][]gotgbot.InlineKeyboardButton{{
					{Text: "Press me", Url: "github.com/paulSonOfLars/gotgbot"},
				}},
			},
		},
	}
	iq.Answer(b, result, nil)
	return nil
}
