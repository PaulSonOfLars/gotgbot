// THIS FILE IS AUTOGENERATED. DO NOT EDIT.
// Regen by running 'go generate' in the repo root.

package gotgbot

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io"
	urlLib "net/url" // renamed to avoid clashes with url vars
	"strconv"
)

// AddStickerToSetOpts is the set of optional fields for Bot.AddStickerToSet.
type AddStickerToSetOpts struct {
	// PNG image with the sticker, must be up to 512 kilobytes in size, dimensions must not exceed 512px, and either width or height must be exactly 512px. Pass a file_id as a String to send a file that already exists on the Telegram servers, pass an HTTP URL as a String for Telegram to get a file from the Internet, or upload a new one using multipart/form-data. More info on Sending Files: https://core.telegram.org/bots/api#sending-files
	PngSticker InputFile
	// TGS animation with the sticker, uploaded using multipart/form-data. See https://core.telegram.org/animated_stickers#technical-requirements for technical requirements
	TgsSticker InputFile
	// A JSON-serialized object for position where the mask should be placed on faces
	MaskPosition MaskPosition
}

// AddStickerToSet Use this method to add a new sticker to a set created by the bot. You must use exactly one of the fields png_sticker or tgs_sticker. Animated stickers can be added to animated sticker sets and only to them. Animated sticker sets can have up to 50 stickers. Static sticker sets can have up to 120 stickers. Returns True on success.
// - user_id (type int64): User identifier of sticker set owner
// - name (type string): Sticker set name
// - emojis (type string): One or more emoji corresponding to the sticker
// - opts (type AddStickerToSetOpts): All optional parameters.
// https://core.telegram.org/bots/api#addstickertoset
func (bot *Bot) AddStickerToSet(userId int64, name string, emojis string, opts *AddStickerToSetOpts) (bool, error) {
	v := urlLib.Values{}
	data := map[string]NamedReader{}
	if userId != 0 {
		v.Add("user_id", strconv.FormatInt(userId, 10))
	}
	v.Add("name", name)
	v.Add("emojis", emojis)
	if opts != nil {
		if opts.PngSticker != nil {
			switch m := opts.PngSticker.(type) {
			case string:
				v.Add("png_sticker", m)

			case NamedReader:
				v.Add("png_sticker", "attach://png_sticker")
				data["png_sticker"] = m

			case io.Reader:
				v.Add("png_sticker", "attach://png_sticker")
				data["png_sticker"] = NamedFile{File: m}

			case []byte:
				v.Add("png_sticker", "attach://png_sticker")
				data["png_sticker"] = NamedFile{File: bytes.NewReader(m)}

			default:
				return false, fmt.Errorf("unknown type for InputFile: %T", opts.PngSticker)
			}
		}
		if opts.TgsSticker != nil {
			switch m := opts.TgsSticker.(type) {
			case NamedReader:
				v.Add("tgs_sticker", "attach://tgs_sticker")
				data["tgs_sticker"] = m

			case io.Reader:
				v.Add("tgs_sticker", "attach://tgs_sticker")
				data["tgs_sticker"] = NamedFile{File: m}

			case []byte:
				v.Add("tgs_sticker", "attach://tgs_sticker")
				data["tgs_sticker"] = NamedFile{File: bytes.NewReader(m)}

			default:
				return false, fmt.Errorf("unknown type for InputFile: %T", opts.TgsSticker)
			}
		}
		bs, err := json.Marshal(opts.MaskPosition)
		if err != nil {
			return false, fmt.Errorf("failed to marshal field mask_position: %w", err)
		}
		v.Add("mask_position", string(bs))
	}

	r, err := bot.Post("addStickerToSet", v, data)
	if err != nil {
		return false, err
	}

	var b bool
	return b, json.Unmarshal(r, &b)
}

// AnswerCallbackQueryOpts is the set of optional fields for Bot.AnswerCallbackQuery.
type AnswerCallbackQueryOpts struct {
	// Text of the notification. If not specified, nothing will be shown to the user, 0-200 characters
	Text string
	// If true, an alert will be shown by the client instead of a notification at the top of the chat screen. Defaults to false.
	ShowAlert bool
	// URL that will be opened by the user's client. If you have created a Game and accepted the conditions via @Botfather, specify the URL that opens your game - note that this will only work if the query comes from a callback_game button. Otherwise, you may use links like t.me/your_bot?start=XXXX that open your bot with a parameter.
	Url string
	// The maximum amount of time in seconds that the result of the callback query may be cached client-side. Telegram apps will support caching starting in version 3.14. Defaults to 0.
	CacheTime int64
}

// AnswerCallbackQuery Use this method to send answers to callback queries sent from inline keyboards. The answer will be displayed to the user as a notification at the top of the chat screen or as an alert. On success, True is returned.
// - callback_query_id (type string): Unique identifier for the query to be answered
// - opts (type AnswerCallbackQueryOpts): All optional parameters.
// https://core.telegram.org/bots/api#answercallbackquery
func (bot *Bot) AnswerCallbackQuery(callbackQueryId string, opts *AnswerCallbackQueryOpts) (bool, error) {
	v := urlLib.Values{}
	v.Add("callback_query_id", callbackQueryId)
	if opts != nil {
		v.Add("text", opts.Text)
		v.Add("show_alert", strconv.FormatBool(opts.ShowAlert))
		v.Add("url", opts.Url)
		if opts.CacheTime != 0 {
			v.Add("cache_time", strconv.FormatInt(opts.CacheTime, 10))
		}
	}

	r, err := bot.Get("answerCallbackQuery", v)
	if err != nil {
		return false, err
	}

	var b bool
	return b, json.Unmarshal(r, &b)
}

// AnswerInlineQueryOpts is the set of optional fields for Bot.AnswerInlineQuery.
type AnswerInlineQueryOpts struct {
	// The maximum amount of time in seconds that the result of the inline query may be cached on the server. Defaults to 300.
	CacheTime int64
	// Pass True, if results may be cached on the server side only for the user that sent the query. By default, results may be returned to any user who sends the same query
	IsPersonal bool
	// Pass the offset that a client should send in the next query with the same text to receive more results. Pass an empty string if there are no more results or if you don't support pagination. Offset length can't exceed 64 bytes.
	NextOffset string
	// If passed, clients will display a button with specified text that switches the user to a private chat with the bot and sends the bot a start message with the parameter switch_pm_parameter
	SwitchPmText string
	// Deep-linking parameter for the /start message sent to the bot when user presses the switch button. 1-64 characters, only A-Z, a-z, 0-9, _ and - are allowed. Example: An inline bot that sends YouTube videos can ask the user to connect the bot to their YouTube account to adapt search results accordingly. To do this, it displays a 'Connect your YouTube account' button above the results, or even before showing any. The user presses the button, switches to a private chat with the bot and, in doing so, passes a start parameter that instructs the bot to return an oauth link. Once done, the bot can offer a switch_inline button so that the user can easily return to the chat where they wanted to use the bot's inline capabilities.
	SwitchPmParameter string
}

// AnswerInlineQuery Use this method to send answers to an inline query. On success, True is returned.No more than 50 results per query are allowed.
// - inline_query_id (type string): Unique identifier for the answered query
// - results (type []InlineQueryResult): A JSON-serialized array of results for the inline query
// - opts (type AnswerInlineQueryOpts): All optional parameters.
// https://core.telegram.org/bots/api#answerinlinequery
func (bot *Bot) AnswerInlineQuery(inlineQueryId string, results []InlineQueryResult, opts *AnswerInlineQueryOpts) (bool, error) {
	v := urlLib.Values{}
	v.Add("inline_query_id", inlineQueryId)
	if results != nil {
		bs, err := json.Marshal(results)
		if err != nil {
			return false, fmt.Errorf("failed to marshal field results: %w", err)
		}
		v.Add("results", string(bs))
	}
	if opts != nil {
		if opts.CacheTime != 0 {
			v.Add("cache_time", strconv.FormatInt(opts.CacheTime, 10))
		}
		v.Add("is_personal", strconv.FormatBool(opts.IsPersonal))
		v.Add("next_offset", opts.NextOffset)
		v.Add("switch_pm_text", opts.SwitchPmText)
		v.Add("switch_pm_parameter", opts.SwitchPmParameter)
	}

	r, err := bot.Get("answerInlineQuery", v)
	if err != nil {
		return false, err
	}

	var b bool
	return b, json.Unmarshal(r, &b)
}

// AnswerPreCheckoutQueryOpts is the set of optional fields for Bot.AnswerPreCheckoutQuery.
type AnswerPreCheckoutQueryOpts struct {
	// Required if ok is False. Error message in human readable form that explains the reason for failure to proceed with the checkout (e.g. "Sorry, somebody just bought the last of our amazing black T-shirts while you were busy filling out your payment details. Please choose a different color or garment!"). Telegram will display this message to the user.
	ErrorMessage string
}

// AnswerPreCheckoutQuery Once the user has confirmed their payment and shipping details, the Bot API sends the final confirmation in the form of an Update with the field pre_checkout_query. Use this method to respond to such pre-checkout queries. On success, True is returned. Note: The Bot API must receive an answer within 10 seconds after the pre-checkout query was sent.
// - pre_checkout_query_id (type string): Unique identifier for the query to be answered
// - ok (type bool): Specify True if everything is alright (goods are available, etc.) and the bot is ready to proceed with the order. Use False if there are any problems.
// - opts (type AnswerPreCheckoutQueryOpts): All optional parameters.
// https://core.telegram.org/bots/api#answerprecheckoutquery
func (bot *Bot) AnswerPreCheckoutQuery(preCheckoutQueryId string, ok bool, opts *AnswerPreCheckoutQueryOpts) (bool, error) {
	v := urlLib.Values{}
	v.Add("pre_checkout_query_id", preCheckoutQueryId)
	v.Add("ok", strconv.FormatBool(ok))
	if opts != nil {
		v.Add("error_message", opts.ErrorMessage)
	}

	r, err := bot.Get("answerPreCheckoutQuery", v)
	if err != nil {
		return false, err
	}

	var b bool
	return b, json.Unmarshal(r, &b)
}

// AnswerShippingQueryOpts is the set of optional fields for Bot.AnswerShippingQuery.
type AnswerShippingQueryOpts struct {
	// Required if ok is True. A JSON-serialized array of available shipping options.
	ShippingOptions []ShippingOption
	// Required if ok is False. Error message in human readable form that explains why it is impossible to complete the order (e.g. "Sorry, delivery to your desired address is unavailable'). Telegram will display this message to the user.
	ErrorMessage string
}

// AnswerShippingQuery If you sent an invoice requesting a shipping address and the parameter is_flexible was specified, the Bot API will send an Update with a shipping_query field to the bot. Use this method to reply to shipping queries. On success, True is returned.
// - shipping_query_id (type string): Unique identifier for the query to be answered
// - ok (type bool): Specify True if delivery to the specified address is possible and False if there are any problems (for example, if delivery to the specified address is not possible)
// - opts (type AnswerShippingQueryOpts): All optional parameters.
// https://core.telegram.org/bots/api#answershippingquery
func (bot *Bot) AnswerShippingQuery(shippingQueryId string, ok bool, opts *AnswerShippingQueryOpts) (bool, error) {
	v := urlLib.Values{}
	v.Add("shipping_query_id", shippingQueryId)
	v.Add("ok", strconv.FormatBool(ok))
	if opts != nil {
		if opts.ShippingOptions != nil {
			bs, err := json.Marshal(opts.ShippingOptions)
			if err != nil {
				return false, fmt.Errorf("failed to marshal field shipping_options: %w", err)
			}
			v.Add("shipping_options", string(bs))
		}
		v.Add("error_message", opts.ErrorMessage)
	}

	r, err := bot.Get("answerShippingQuery", v)
	if err != nil {
		return false, err
	}

	var b bool
	return b, json.Unmarshal(r, &b)
}

// BanChatMemberOpts is the set of optional fields for Bot.BanChatMember.
type BanChatMemberOpts struct {
	// Date when the user will be unbanned, unix time. If user is banned for more than 366 days or less than 30 seconds from the current time they are considered to be banned forever. Applied for supergroups and channels only.
	UntilDate int64
	// Pass True to delete all messages from the chat for the user that is being removed. If False, the user will be able to see messages in the group that were sent before the user was removed. Always True for supergroups and channels.
	RevokeMessages bool
}

// BanChatMember Use this method to ban a user in a group, a supergroup or a channel. In the case of supergroups and channels, the user will not be able to return to the chat on their own using invite links, etc., unless unbanned first. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns True on success.
// - chat_id (type int64): Unique identifier for the target group or username of the target supergroup or channel (in the format @channelusername)
// - user_id (type int64): Unique identifier of the target user
// - opts (type BanChatMemberOpts): All optional parameters.
// https://core.telegram.org/bots/api#banchatmember
func (bot *Bot) BanChatMember(chatId int64, userId int64, opts *BanChatMemberOpts) (bool, error) {
	v := urlLib.Values{}
	if chatId != 0 {
		v.Add("chat_id", strconv.FormatInt(chatId, 10))
	}
	if userId != 0 {
		v.Add("user_id", strconv.FormatInt(userId, 10))
	}
	if opts != nil {
		if opts.UntilDate != 0 {
			v.Add("until_date", strconv.FormatInt(opts.UntilDate, 10))
		}
		v.Add("revoke_messages", strconv.FormatBool(opts.RevokeMessages))
	}

	r, err := bot.Get("banChatMember", v)
	if err != nil {
		return false, err
	}

	var b bool
	return b, json.Unmarshal(r, &b)
}

// Close Use this method to close the bot instance before moving it from one local server to another. You need to delete the webhook before calling this method to ensure that the bot isn't launched again after server restart. The method will return error 429 in the first 10 minutes after the bot is launched. Returns True on success. Requires no parameters.
// https://core.telegram.org/bots/api#close
func (bot *Bot) Close() (bool, error) {
	v := urlLib.Values{}

	r, err := bot.Get("close", v)
	if err != nil {
		return false, err
	}

	var b bool
	return b, json.Unmarshal(r, &b)
}

// CopyMessageOpts is the set of optional fields for Bot.CopyMessage.
type CopyMessageOpts struct {
	// New caption for media, 0-1024 characters after entities parsing. If not specified, the original caption is kept
	Caption string
	// Mode for parsing entities in the new caption. See formatting options for more details.
	ParseMode string
	// List of special entities that appear in the new caption, which can be specified instead of parse_mode
	CaptionEntities []MessageEntity
	// Sends the message silently. Users will receive a notification with no sound.
	DisableNotification bool
	// If the message is a reply, ID of the original message
	ReplyToMessageId int64
	// Pass True, if the message should be sent even if the specified replied-to message is not found
	AllowSendingWithoutReply bool
	// Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove reply keyboard or to force a reply from the user.
	ReplyMarkup ReplyMarkup
}

// CopyMessage Use this method to copy messages of any kind. Service messages and invoice messages can't be copied. The method is analogous to the method forwardMessage, but the copied message doesn't have a link to the original message. Returns the MessageId of the sent message on success.
// - chat_id (type int64): Unique identifier for the target chat or username of the target channel (in the format @channelusername)
// - from_chat_id (type int64): Unique identifier for the chat where the original message was sent (or channel username in the format @channelusername)
// - message_id (type int64): Message identifier in the chat specified in from_chat_id
// - opts (type CopyMessageOpts): All optional parameters.
// https://core.telegram.org/bots/api#copymessage
func (bot *Bot) CopyMessage(chatId int64, fromChatId int64, messageId int64, opts *CopyMessageOpts) (*MessageId, error) {
	v := urlLib.Values{}
	if chatId != 0 {
		v.Add("chat_id", strconv.FormatInt(chatId, 10))
	}
	if fromChatId != 0 {
		v.Add("from_chat_id", strconv.FormatInt(fromChatId, 10))
	}
	if messageId != 0 {
		v.Add("message_id", strconv.FormatInt(messageId, 10))
	}
	if opts != nil {
		v.Add("caption", opts.Caption)
		v.Add("parse_mode", opts.ParseMode)
		if opts.CaptionEntities != nil {
			bs, err := json.Marshal(opts.CaptionEntities)
			if err != nil {
				return nil, fmt.Errorf("failed to marshal field caption_entities: %w", err)
			}
			v.Add("caption_entities", string(bs))
		}
		v.Add("disable_notification", strconv.FormatBool(opts.DisableNotification))
		if opts.ReplyToMessageId != 0 {
			v.Add("reply_to_message_id", strconv.FormatInt(opts.ReplyToMessageId, 10))
		}
		v.Add("allow_sending_without_reply", strconv.FormatBool(opts.AllowSendingWithoutReply))
		if opts.ReplyMarkup != nil {
			bs, err := json.Marshal(opts.ReplyMarkup)
			if err != nil {
				return nil, fmt.Errorf("failed to marshal field reply_markup: %w", err)
			}
			v.Add("reply_markup", string(bs))
		}
	}

	r, err := bot.Get("copyMessage", v)
	if err != nil {
		return nil, err
	}

	var m MessageId
	return &m, json.Unmarshal(r, &m)
}

// CreateChatInviteLinkOpts is the set of optional fields for Bot.CreateChatInviteLink.
type CreateChatInviteLinkOpts struct {
	// Point in time (Unix timestamp) when the link will expire
	ExpireDate int64
	// Maximum number of users that can be members of the chat simultaneously after joining the chat via this invite link; 1-99999
	MemberLimit int64
}

// CreateChatInviteLink Use this method to create an additional invite link for a chat. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. The link can be revoked using the method revokeChatInviteLink. Returns the new invite link as ChatInviteLink object.
// - chat_id (type int64): Unique identifier for the target chat or username of the target channel (in the format @channelusername)
// - opts (type CreateChatInviteLinkOpts): All optional parameters.
// https://core.telegram.org/bots/api#createchatinvitelink
func (bot *Bot) CreateChatInviteLink(chatId int64, opts *CreateChatInviteLinkOpts) (*ChatInviteLink, error) {
	v := urlLib.Values{}
	if chatId != 0 {
		v.Add("chat_id", strconv.FormatInt(chatId, 10))
	}
	if opts != nil {
		if opts.ExpireDate != 0 {
			v.Add("expire_date", strconv.FormatInt(opts.ExpireDate, 10))
		}
		if opts.MemberLimit != 0 {
			v.Add("member_limit", strconv.FormatInt(opts.MemberLimit, 10))
		}
	}

	r, err := bot.Get("createChatInviteLink", v)
	if err != nil {
		return nil, err
	}

	var c ChatInviteLink
	return &c, json.Unmarshal(r, &c)
}

// CreateNewStickerSetOpts is the set of optional fields for Bot.CreateNewStickerSet.
type CreateNewStickerSetOpts struct {
	// PNG image with the sticker, must be up to 512 kilobytes in size, dimensions must not exceed 512px, and either width or height must be exactly 512px. Pass a file_id as a String to send a file that already exists on the Telegram servers, pass an HTTP URL as a String for Telegram to get a file from the Internet, or upload a new one using multipart/form-data. More info on Sending Files: https://core.telegram.org/bots/api#sending-files
	PngSticker InputFile
	// TGS animation with the sticker, uploaded using multipart/form-data. See https://core.telegram.org/animated_stickers#technical-requirements for technical requirements
	TgsSticker InputFile
	// Pass True, if a set of mask stickers should be created
	ContainsMasks bool
	// A JSON-serialized object for position where the mask should be placed on faces
	MaskPosition MaskPosition
}

// CreateNewStickerSet Use this method to create a new sticker set owned by a user. The bot will be able to edit the sticker set thus created. You must use exactly one of the fields png_sticker or tgs_sticker. Returns True on success.
// - user_id (type int64): User identifier of created sticker set owner
// - name (type string): Short name of sticker set, to be used in t.me/addstickers/ URLs (e.g., animals). Can contain only english letters, digits and underscores. Must begin with a letter, can't contain consecutive underscores and must end in "_by_<bot username>". <bot_username> is case insensitive. 1-64 characters.
// - title (type string): Sticker set title, 1-64 characters
// - emojis (type string): One or more emoji corresponding to the sticker
// - opts (type CreateNewStickerSetOpts): All optional parameters.
// https://core.telegram.org/bots/api#createnewstickerset
func (bot *Bot) CreateNewStickerSet(userId int64, name string, title string, emojis string, opts *CreateNewStickerSetOpts) (bool, error) {
	v := urlLib.Values{}
	data := map[string]NamedReader{}
	if userId != 0 {
		v.Add("user_id", strconv.FormatInt(userId, 10))
	}
	v.Add("name", name)
	v.Add("title", title)
	v.Add("emojis", emojis)
	if opts != nil {
		if opts.PngSticker != nil {
			switch m := opts.PngSticker.(type) {
			case string:
				v.Add("png_sticker", m)

			case NamedReader:
				v.Add("png_sticker", "attach://png_sticker")
				data["png_sticker"] = m

			case io.Reader:
				v.Add("png_sticker", "attach://png_sticker")
				data["png_sticker"] = NamedFile{File: m}

			case []byte:
				v.Add("png_sticker", "attach://png_sticker")
				data["png_sticker"] = NamedFile{File: bytes.NewReader(m)}

			default:
				return false, fmt.Errorf("unknown type for InputFile: %T", opts.PngSticker)
			}
		}
		if opts.TgsSticker != nil {
			switch m := opts.TgsSticker.(type) {
			case NamedReader:
				v.Add("tgs_sticker", "attach://tgs_sticker")
				data["tgs_sticker"] = m

			case io.Reader:
				v.Add("tgs_sticker", "attach://tgs_sticker")
				data["tgs_sticker"] = NamedFile{File: m}

			case []byte:
				v.Add("tgs_sticker", "attach://tgs_sticker")
				data["tgs_sticker"] = NamedFile{File: bytes.NewReader(m)}

			default:
				return false, fmt.Errorf("unknown type for InputFile: %T", opts.TgsSticker)
			}
		}
		v.Add("contains_masks", strconv.FormatBool(opts.ContainsMasks))
		bs, err := json.Marshal(opts.MaskPosition)
		if err != nil {
			return false, fmt.Errorf("failed to marshal field mask_position: %w", err)
		}
		v.Add("mask_position", string(bs))
	}

	r, err := bot.Post("createNewStickerSet", v, data)
	if err != nil {
		return false, err
	}

	var b bool
	return b, json.Unmarshal(r, &b)
}

// DeleteChatPhoto Use this method to delete a chat photo. Photos can't be changed for private chats. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns True on success.
// - chat_id (type int64): Unique identifier for the target chat or username of the target channel (in the format @channelusername)
// https://core.telegram.org/bots/api#deletechatphoto
func (bot *Bot) DeleteChatPhoto(chatId int64) (bool, error) {
	v := urlLib.Values{}
	if chatId != 0 {
		v.Add("chat_id", strconv.FormatInt(chatId, 10))
	}

	r, err := bot.Get("deleteChatPhoto", v)
	if err != nil {
		return false, err
	}

	var b bool
	return b, json.Unmarshal(r, &b)
}

// DeleteChatStickerSet Use this method to delete a group sticker set from a supergroup. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Use the field can_set_sticker_set optionally returned in getChat requests to check if the bot can use this method. Returns True on success.
// - chat_id (type int64): Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername)
// https://core.telegram.org/bots/api#deletechatstickerset
func (bot *Bot) DeleteChatStickerSet(chatId int64) (bool, error) {
	v := urlLib.Values{}
	if chatId != 0 {
		v.Add("chat_id", strconv.FormatInt(chatId, 10))
	}

	r, err := bot.Get("deleteChatStickerSet", v)
	if err != nil {
		return false, err
	}

	var b bool
	return b, json.Unmarshal(r, &b)
}

// DeleteMessage Use this method to delete a message, including service messages, with the following limitations:- A message can only be deleted if it was sent less than 48 hours ago.- A dice message in a private chat can only be deleted if it was sent more than 24 hours ago.- Bots can delete outgoing messages in private chats, groups, and supergroups.- Bots can delete incoming messages in private chats.- Bots granted can_post_messages permissions can delete outgoing messages in channels.- If the bot is an administrator of a group, it can delete any message there.- If the bot has can_delete_messages permission in a supergroup or a channel, it can delete any message there.Returns True on success.
// - chat_id (type int64): Unique identifier for the target chat or username of the target channel (in the format @channelusername)
// - message_id (type int64): Identifier of the message to delete
// https://core.telegram.org/bots/api#deletemessage
func (bot *Bot) DeleteMessage(chatId int64, messageId int64) (bool, error) {
	v := urlLib.Values{}
	if chatId != 0 {
		v.Add("chat_id", strconv.FormatInt(chatId, 10))
	}
	if messageId != 0 {
		v.Add("message_id", strconv.FormatInt(messageId, 10))
	}

	r, err := bot.Get("deleteMessage", v)
	if err != nil {
		return false, err
	}

	var b bool
	return b, json.Unmarshal(r, &b)
}

// DeleteMyCommandsOpts is the set of optional fields for Bot.DeleteMyCommands.
type DeleteMyCommandsOpts struct {
	// A JSON-serialized object, describing scope of users for which the commands are relevant. Defaults to BotCommandScopeDefault.
	Scope BotCommandScope
	// A two-letter ISO 639-1 language code. If empty, commands will be applied to all users from the given scope, for whose language there are no dedicated commands
	LanguageCode string
}

// DeleteMyCommands Use this method to delete the list of the bot's commands for the given scope and user language. After deletion, higher level commands will be shown to affected users. Returns True on success.
// - opts (type DeleteMyCommandsOpts): All optional parameters.
// https://core.telegram.org/bots/api#deletemycommands
func (bot *Bot) DeleteMyCommands(opts *DeleteMyCommandsOpts) (bool, error) {
	v := urlLib.Values{}
	if opts != nil {
		bs, err := json.Marshal(opts.Scope)
		if err != nil {
			return false, fmt.Errorf("failed to marshal field scope: %w", err)
		}
		v.Add("scope", string(bs))
		v.Add("language_code", opts.LanguageCode)
	}

	r, err := bot.Get("deleteMyCommands", v)
	if err != nil {
		return false, err
	}

	var b bool
	return b, json.Unmarshal(r, &b)
}

// DeleteStickerFromSet Use this method to delete a sticker from a set created by the bot. Returns True on success.
// - sticker (type string): File identifier of the sticker
// https://core.telegram.org/bots/api#deletestickerfromset
func (bot *Bot) DeleteStickerFromSet(sticker string) (bool, error) {
	v := urlLib.Values{}
	v.Add("sticker", sticker)

	r, err := bot.Get("deleteStickerFromSet", v)
	if err != nil {
		return false, err
	}

	var b bool
	return b, json.Unmarshal(r, &b)
}

// DeleteWebhookOpts is the set of optional fields for Bot.DeleteWebhook.
type DeleteWebhookOpts struct {
	// Pass True to drop all pending updates
	DropPendingUpdates bool
}

// DeleteWebhook Use this method to remove webhook integration if you decide to switch back to getUpdates. Returns True on success.
// - opts (type DeleteWebhookOpts): All optional parameters.
// https://core.telegram.org/bots/api#deletewebhook
func (bot *Bot) DeleteWebhook(opts *DeleteWebhookOpts) (bool, error) {
	v := urlLib.Values{}
	if opts != nil {
		v.Add("drop_pending_updates", strconv.FormatBool(opts.DropPendingUpdates))
	}

	r, err := bot.Get("deleteWebhook", v)
	if err != nil {
		return false, err
	}

	var b bool
	return b, json.Unmarshal(r, &b)
}

// EditChatInviteLinkOpts is the set of optional fields for Bot.EditChatInviteLink.
type EditChatInviteLinkOpts struct {
	// Point in time (Unix timestamp) when the link will expire
	ExpireDate int64
	// Maximum number of users that can be members of the chat simultaneously after joining the chat via this invite link; 1-99999
	MemberLimit int64
}

// EditChatInviteLink Use this method to edit a non-primary invite link created by the bot. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns the edited invite link as a ChatInviteLink object.
// - chat_id (type int64): Unique identifier for the target chat or username of the target channel (in the format @channelusername)
// - invite_link (type string): The invite link to edit
// - opts (type EditChatInviteLinkOpts): All optional parameters.
// https://core.telegram.org/bots/api#editchatinvitelink
func (bot *Bot) EditChatInviteLink(chatId int64, inviteLink string, opts *EditChatInviteLinkOpts) (*ChatInviteLink, error) {
	v := urlLib.Values{}
	if chatId != 0 {
		v.Add("chat_id", strconv.FormatInt(chatId, 10))
	}
	v.Add("invite_link", inviteLink)
	if opts != nil {
		if opts.ExpireDate != 0 {
			v.Add("expire_date", strconv.FormatInt(opts.ExpireDate, 10))
		}
		if opts.MemberLimit != 0 {
			v.Add("member_limit", strconv.FormatInt(opts.MemberLimit, 10))
		}
	}

	r, err := bot.Get("editChatInviteLink", v)
	if err != nil {
		return nil, err
	}

	var c ChatInviteLink
	return &c, json.Unmarshal(r, &c)
}

// EditMessageCaptionOpts is the set of optional fields for Bot.EditMessageCaption.
type EditMessageCaptionOpts struct {
	// Required if inline_message_id is not specified. Unique identifier for the target chat or username of the target channel (in the format @channelusername)
	ChatId int64
	// Required if inline_message_id is not specified. Identifier of the message to edit
	MessageId int64
	// Required if chat_id and message_id are not specified. Identifier of the inline message
	InlineMessageId string
	// New caption of the message, 0-1024 characters after entities parsing
	Caption string
	// Mode for parsing entities in the message caption. See formatting options for more details.
	ParseMode string
	// List of special entities that appear in the caption, which can be specified instead of parse_mode
	CaptionEntities []MessageEntity
	// A JSON-serialized object for an inline keyboard.
	ReplyMarkup InlineKeyboardMarkup
}

// EditMessageCaption Use this method to edit captions of messages. On success, if the edited message is not an inline message, the edited Message is returned, otherwise True is returned.
// - opts (type EditMessageCaptionOpts): All optional parameters.
// https://core.telegram.org/bots/api#editmessagecaption
func (bot *Bot) EditMessageCaption(opts *EditMessageCaptionOpts) (*Message, error) {
	v := urlLib.Values{}
	if opts != nil {
		if opts.ChatId != 0 {
			v.Add("chat_id", strconv.FormatInt(opts.ChatId, 10))
		}
		if opts.MessageId != 0 {
			v.Add("message_id", strconv.FormatInt(opts.MessageId, 10))
		}
		v.Add("inline_message_id", opts.InlineMessageId)
		v.Add("caption", opts.Caption)
		v.Add("parse_mode", opts.ParseMode)
		if opts.CaptionEntities != nil {
			bs, err := json.Marshal(opts.CaptionEntities)
			if err != nil {
				return nil, fmt.Errorf("failed to marshal field caption_entities: %w", err)
			}
			v.Add("caption_entities", string(bs))
		}
		bs, err := json.Marshal(opts.ReplyMarkup)
		if err != nil {
			return nil, fmt.Errorf("failed to marshal field reply_markup: %w", err)
		}
		v.Add("reply_markup", string(bs))
	}

	r, err := bot.Get("editMessageCaption", v)
	if err != nil {
		return nil, err
	}

	var m Message
	return &m, json.Unmarshal(r, &m)
}

// EditMessageLiveLocationOpts is the set of optional fields for Bot.EditMessageLiveLocation.
type EditMessageLiveLocationOpts struct {
	// Required if inline_message_id is not specified. Unique identifier for the target chat or username of the target channel (in the format @channelusername)
	ChatId int64
	// Required if inline_message_id is not specified. Identifier of the message to edit
	MessageId int64
	// Required if chat_id and message_id are not specified. Identifier of the inline message
	InlineMessageId string
	// The radius of uncertainty for the location, measured in meters; 0-1500
	HorizontalAccuracy float64
	// Direction in which the user is moving, in degrees. Must be between 1 and 360 if specified.
	Heading int64
	// Maximum distance for proximity alerts about approaching another chat member, in meters. Must be between 1 and 100000 if specified.
	ProximityAlertRadius int64
	// A JSON-serialized object for a new inline keyboard.
	ReplyMarkup InlineKeyboardMarkup
}

// EditMessageLiveLocation Use this method to edit live location messages. A location can be edited until its live_period expires or editing is explicitly disabled by a call to stopMessageLiveLocation. On success, if the edited message is not an inline message, the edited Message is returned, otherwise True is returned.
// - latitude (type float64): Latitude of new location
// - longitude (type float64): Longitude of new location
// - opts (type EditMessageLiveLocationOpts): All optional parameters.
// https://core.telegram.org/bots/api#editmessagelivelocation
func (bot *Bot) EditMessageLiveLocation(latitude float64, longitude float64, opts *EditMessageLiveLocationOpts) (*Message, error) {
	v := urlLib.Values{}
	if latitude != 0.0 {
		v.Add("latitude", strconv.FormatFloat(latitude, 'f', -1, 64))
	}
	if longitude != 0.0 {
		v.Add("longitude", strconv.FormatFloat(longitude, 'f', -1, 64))
	}
	if opts != nil {
		if opts.ChatId != 0 {
			v.Add("chat_id", strconv.FormatInt(opts.ChatId, 10))
		}
		if opts.MessageId != 0 {
			v.Add("message_id", strconv.FormatInt(opts.MessageId, 10))
		}
		v.Add("inline_message_id", opts.InlineMessageId)
		if opts.HorizontalAccuracy != 0.0 {
			v.Add("horizontal_accuracy", strconv.FormatFloat(opts.HorizontalAccuracy, 'f', -1, 64))
		}
		if opts.Heading != 0 {
			v.Add("heading", strconv.FormatInt(opts.Heading, 10))
		}
		if opts.ProximityAlertRadius != 0 {
			v.Add("proximity_alert_radius", strconv.FormatInt(opts.ProximityAlertRadius, 10))
		}
		bs, err := json.Marshal(opts.ReplyMarkup)
		if err != nil {
			return nil, fmt.Errorf("failed to marshal field reply_markup: %w", err)
		}
		v.Add("reply_markup", string(bs))
	}

	r, err := bot.Get("editMessageLiveLocation", v)
	if err != nil {
		return nil, err
	}

	var m Message
	return &m, json.Unmarshal(r, &m)
}

// EditMessageMediaOpts is the set of optional fields for Bot.EditMessageMedia.
type EditMessageMediaOpts struct {
	// Required if inline_message_id is not specified. Unique identifier for the target chat or username of the target channel (in the format @channelusername)
	ChatId int64
	// Required if inline_message_id is not specified. Identifier of the message to edit
	MessageId int64
	// Required if chat_id and message_id are not specified. Identifier of the inline message
	InlineMessageId string
	// A JSON-serialized object for a new inline keyboard.
	ReplyMarkup InlineKeyboardMarkup
}

// EditMessageMedia Use this method to edit animation, audio, document, photo, or video messages. If a message is part of a message album, then it can be edited only to an audio for audio albums, only to a document for document albums and to a photo or a video otherwise. When an inline message is edited, a new file can't be uploaded. Use a previously uploaded file via its file_id or specify a URL. On success, if the edited message was sent by the bot, the edited Message is returned, otherwise True is returned.
// - media (type InputMedia): A JSON-serialized object for a new media content of the message
// - opts (type EditMessageMediaOpts): All optional parameters.
// https://core.telegram.org/bots/api#editmessagemedia
func (bot *Bot) EditMessageMedia(media InputMedia, opts *EditMessageMediaOpts) (*Message, error) {
	v := urlLib.Values{}
	data := map[string]NamedReader{}
	inputMediaBs, err := media.InputMediaParams("media", data)
	if err != nil {
		return nil, fmt.Errorf("failed to marshal field media: %w", err)
	}
	v.Add("media", string(inputMediaBs))
	if opts != nil {
		if opts.ChatId != 0 {
			v.Add("chat_id", strconv.FormatInt(opts.ChatId, 10))
		}
		if opts.MessageId != 0 {
			v.Add("message_id", strconv.FormatInt(opts.MessageId, 10))
		}
		v.Add("inline_message_id", opts.InlineMessageId)
		bs, err := json.Marshal(opts.ReplyMarkup)
		if err != nil {
			return nil, fmt.Errorf("failed to marshal field reply_markup: %w", err)
		}
		v.Add("reply_markup", string(bs))
	}

	r, err := bot.Post("editMessageMedia", v, data)
	if err != nil {
		return nil, err
	}

	var m Message
	return &m, json.Unmarshal(r, &m)
}

// EditMessageReplyMarkupOpts is the set of optional fields for Bot.EditMessageReplyMarkup.
type EditMessageReplyMarkupOpts struct {
	// Required if inline_message_id is not specified. Unique identifier for the target chat or username of the target channel (in the format @channelusername)
	ChatId int64
	// Required if inline_message_id is not specified. Identifier of the message to edit
	MessageId int64
	// Required if chat_id and message_id are not specified. Identifier of the inline message
	InlineMessageId string
	// A JSON-serialized object for an inline keyboard.
	ReplyMarkup InlineKeyboardMarkup
}

// EditMessageReplyMarkup Use this method to edit only the reply markup of messages. On success, if the edited message is not an inline message, the edited Message is returned, otherwise True is returned.
// - opts (type EditMessageReplyMarkupOpts): All optional parameters.
// https://core.telegram.org/bots/api#editmessagereplymarkup
func (bot *Bot) EditMessageReplyMarkup(opts *EditMessageReplyMarkupOpts) (*Message, error) {
	v := urlLib.Values{}
	if opts != nil {
		if opts.ChatId != 0 {
			v.Add("chat_id", strconv.FormatInt(opts.ChatId, 10))
		}
		if opts.MessageId != 0 {
			v.Add("message_id", strconv.FormatInt(opts.MessageId, 10))
		}
		v.Add("inline_message_id", opts.InlineMessageId)
		bs, err := json.Marshal(opts.ReplyMarkup)
		if err != nil {
			return nil, fmt.Errorf("failed to marshal field reply_markup: %w", err)
		}
		v.Add("reply_markup", string(bs))
	}

	r, err := bot.Get("editMessageReplyMarkup", v)
	if err != nil {
		return nil, err
	}

	var m Message
	return &m, json.Unmarshal(r, &m)
}

// EditMessageTextOpts is the set of optional fields for Bot.EditMessageText.
type EditMessageTextOpts struct {
	// Required if inline_message_id is not specified. Unique identifier for the target chat or username of the target channel (in the format @channelusername)
	ChatId int64
	// Required if inline_message_id is not specified. Identifier of the message to edit
	MessageId int64
	// Required if chat_id and message_id are not specified. Identifier of the inline message
	InlineMessageId string
	// Mode for parsing entities in the message text. See formatting options for more details.
	ParseMode string
	// List of special entities that appear in message text, which can be specified instead of parse_mode
	Entities []MessageEntity
	// Disables link previews for links in this message
	DisableWebPagePreview bool
	// A JSON-serialized object for an inline keyboard.
	ReplyMarkup InlineKeyboardMarkup
}

// EditMessageText Use this method to edit text and game messages. On success, if the edited message is not an inline message, the edited Message is returned, otherwise True is returned.
// - text (type string): New text of the message, 1-4096 characters after entities parsing
// - opts (type EditMessageTextOpts): All optional parameters.
// https://core.telegram.org/bots/api#editmessagetext
func (bot *Bot) EditMessageText(text string, opts *EditMessageTextOpts) (*Message, error) {
	v := urlLib.Values{}
	v.Add("text", text)
	if opts != nil {
		if opts.ChatId != 0 {
			v.Add("chat_id", strconv.FormatInt(opts.ChatId, 10))
		}
		if opts.MessageId != 0 {
			v.Add("message_id", strconv.FormatInt(opts.MessageId, 10))
		}
		v.Add("inline_message_id", opts.InlineMessageId)
		v.Add("parse_mode", opts.ParseMode)
		if opts.Entities != nil {
			bs, err := json.Marshal(opts.Entities)
			if err != nil {
				return nil, fmt.Errorf("failed to marshal field entities: %w", err)
			}
			v.Add("entities", string(bs))
		}
		v.Add("disable_web_page_preview", strconv.FormatBool(opts.DisableWebPagePreview))
		bs, err := json.Marshal(opts.ReplyMarkup)
		if err != nil {
			return nil, fmt.Errorf("failed to marshal field reply_markup: %w", err)
		}
		v.Add("reply_markup", string(bs))
	}

	r, err := bot.Get("editMessageText", v)
	if err != nil {
		return nil, err
	}

	var m Message
	return &m, json.Unmarshal(r, &m)
}

// ExportChatInviteLink Use this method to generate a new primary invite link for a chat; any previously generated primary link is revoked. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns the new invite link as String on success.
// - chat_id (type int64): Unique identifier for the target chat or username of the target channel (in the format @channelusername)
// https://core.telegram.org/bots/api#exportchatinvitelink
func (bot *Bot) ExportChatInviteLink(chatId int64) (string, error) {
	v := urlLib.Values{}
	if chatId != 0 {
		v.Add("chat_id", strconv.FormatInt(chatId, 10))
	}

	r, err := bot.Get("exportChatInviteLink", v)
	if err != nil {
		return "", err
	}

	var s string
	return s, json.Unmarshal(r, &s)
}

// ForwardMessageOpts is the set of optional fields for Bot.ForwardMessage.
type ForwardMessageOpts struct {
	// Sends the message silently. Users will receive a notification with no sound.
	DisableNotification bool
}

// ForwardMessage Use this method to forward messages of any kind. Service messages can't be forwarded. On success, the sent Message is returned.
// - chat_id (type int64): Unique identifier for the target chat or username of the target channel (in the format @channelusername)
// - from_chat_id (type int64): Unique identifier for the chat where the original message was sent (or channel username in the format @channelusername)
// - message_id (type int64): Message identifier in the chat specified in from_chat_id
// - opts (type ForwardMessageOpts): All optional parameters.
// https://core.telegram.org/bots/api#forwardmessage
func (bot *Bot) ForwardMessage(chatId int64, fromChatId int64, messageId int64, opts *ForwardMessageOpts) (*Message, error) {
	v := urlLib.Values{}
	if chatId != 0 {
		v.Add("chat_id", strconv.FormatInt(chatId, 10))
	}
	if fromChatId != 0 {
		v.Add("from_chat_id", strconv.FormatInt(fromChatId, 10))
	}
	if messageId != 0 {
		v.Add("message_id", strconv.FormatInt(messageId, 10))
	}
	if opts != nil {
		v.Add("disable_notification", strconv.FormatBool(opts.DisableNotification))
	}

	r, err := bot.Get("forwardMessage", v)
	if err != nil {
		return nil, err
	}

	var m Message
	return &m, json.Unmarshal(r, &m)
}

// GetChat Use this method to get up to date information about the chat (current name of the user for one-on-one conversations, current username of a user, group or channel, etc.). Returns a Chat object on success.
// - chat_id (type int64): Unique identifier for the target chat or username of the target supergroup or channel (in the format @channelusername)
// https://core.telegram.org/bots/api#getchat
func (bot *Bot) GetChat(chatId int64) (*Chat, error) {
	v := urlLib.Values{}
	if chatId != 0 {
		v.Add("chat_id", strconv.FormatInt(chatId, 10))
	}

	r, err := bot.Get("getChat", v)
	if err != nil {
		return nil, err
	}

	var c Chat
	return &c, json.Unmarshal(r, &c)
}

// GetChatAdministrators Use this method to get a list of administrators in a chat. On success, returns an Array of ChatMember objects that contains information about all chat administrators except other bots. If the chat is a group or a supergroup and no administrators were appointed, only the creator will be returned.
// - chat_id (type int64): Unique identifier for the target chat or username of the target supergroup or channel (in the format @channelusername)
// https://core.telegram.org/bots/api#getchatadministrators
func (bot *Bot) GetChatAdministrators(chatId int64) ([]ChatMember, error) {
	v := urlLib.Values{}
	if chatId != 0 {
		v.Add("chat_id", strconv.FormatInt(chatId, 10))
	}

	r, err := bot.Get("getChatAdministrators", v)
	if err != nil {
		return nil, err
	}

	return unmarshalChatMemberArray(r)
}

// GetChatMember Use this method to get information about a member of a chat. Returns a ChatMember object on success.
// - chat_id (type int64): Unique identifier for the target chat or username of the target supergroup or channel (in the format @channelusername)
// - user_id (type int64): Unique identifier of the target user
// https://core.telegram.org/bots/api#getchatmember
func (bot *Bot) GetChatMember(chatId int64, userId int64) (ChatMember, error) {
	v := urlLib.Values{}
	if chatId != 0 {
		v.Add("chat_id", strconv.FormatInt(chatId, 10))
	}
	if userId != 0 {
		v.Add("user_id", strconv.FormatInt(userId, 10))
	}

	r, err := bot.Get("getChatMember", v)
	if err != nil {
		return nil, err
	}

	return unmarshalChatMember(r)
}

// GetChatMemberCount Use this method to get the number of members in a chat. Returns Int on success.
// - chat_id (type int64): Unique identifier for the target chat or username of the target supergroup or channel (in the format @channelusername)
// https://core.telegram.org/bots/api#getchatmembercount
func (bot *Bot) GetChatMemberCount(chatId int64) (int64, error) {
	v := urlLib.Values{}
	if chatId != 0 {
		v.Add("chat_id", strconv.FormatInt(chatId, 10))
	}

	r, err := bot.Get("getChatMemberCount", v)
	if err != nil {
		return 0, err
	}

	var i int64
	return i, json.Unmarshal(r, &i)
}

// GetFile Use this method to get basic info about a file and prepare it for downloading. For the moment, bots can download files of up to 20MB in size. On success, a File object is returned. The file can then be downloaded via the link https://api.telegram.org/file/bot<token>/<file_path>, where <file_path> is taken from the response. It is guaranteed that the link will be valid for at least 1 hour. When the link expires, a new one can be requested by calling getFile again.
// Note: This function may not preserve the original file name and MIME type. You should save the file's MIME type and name (if available) when the File object is received.
// - file_id (type string): File identifier to get info about
// https://core.telegram.org/bots/api#getfile
func (bot *Bot) GetFile(fileId string) (*File, error) {
	v := urlLib.Values{}
	v.Add("file_id", fileId)

	r, err := bot.Get("getFile", v)
	if err != nil {
		return nil, err
	}

	var f File
	return &f, json.Unmarshal(r, &f)
}

// GetGameHighScoresOpts is the set of optional fields for Bot.GetGameHighScores.
type GetGameHighScoresOpts struct {
	// Required if inline_message_id is not specified. Unique identifier for the target chat
	ChatId int64
	// Required if inline_message_id is not specified. Identifier of the sent message
	MessageId int64
	// Required if chat_id and message_id are not specified. Identifier of the inline message
	InlineMessageId string
}

// GetGameHighScores Use this method to get data for high score tables. Will return the score of the specified user and several of their neighbors in a game. On success, returns an Array of GameHighScore objects.
// - user_id (type int64): Target user id
// - opts (type GetGameHighScoresOpts): All optional parameters.
// https://core.telegram.org/bots/api#getgamehighscores
func (bot *Bot) GetGameHighScores(userId int64, opts *GetGameHighScoresOpts) ([]GameHighScore, error) {
	v := urlLib.Values{}
	if userId != 0 {
		v.Add("user_id", strconv.FormatInt(userId, 10))
	}
	if opts != nil {
		if opts.ChatId != 0 {
			v.Add("chat_id", strconv.FormatInt(opts.ChatId, 10))
		}
		if opts.MessageId != 0 {
			v.Add("message_id", strconv.FormatInt(opts.MessageId, 10))
		}
		v.Add("inline_message_id", opts.InlineMessageId)
	}

	r, err := bot.Get("getGameHighScores", v)
	if err != nil {
		return nil, err
	}

	var g []GameHighScore
	return g, json.Unmarshal(r, &g)
}

// GetMe A simple method for testing your bot's auth token. Requires no parameters. Returns basic information about the bot in form of a User object.
// https://core.telegram.org/bots/api#getme
func (bot *Bot) GetMe() (*User, error) {
	v := urlLib.Values{}

	r, err := bot.Get("getMe", v)
	if err != nil {
		return nil, err
	}

	var u User
	return &u, json.Unmarshal(r, &u)
}

// GetMyCommandsOpts is the set of optional fields for Bot.GetMyCommands.
type GetMyCommandsOpts struct {
	// A JSON-serialized object, describing scope of users. Defaults to BotCommandScopeDefault.
	Scope BotCommandScope
	// A two-letter ISO 639-1 language code or an empty string
	LanguageCode string
}

// GetMyCommands Use this method to get the current list of the bot's commands for the given scope and user language. Returns Array of BotCommand on success. If commands aren't set, an empty list is returned.
// - opts (type GetMyCommandsOpts): All optional parameters.
// https://core.telegram.org/bots/api#getmycommands
func (bot *Bot) GetMyCommands(opts *GetMyCommandsOpts) ([]BotCommand, error) {
	v := urlLib.Values{}
	if opts != nil {
		bs, err := json.Marshal(opts.Scope)
		if err != nil {
			return nil, fmt.Errorf("failed to marshal field scope: %w", err)
		}
		v.Add("scope", string(bs))
		v.Add("language_code", opts.LanguageCode)
	}

	r, err := bot.Get("getMyCommands", v)
	if err != nil {
		return nil, err
	}

	var b []BotCommand
	return b, json.Unmarshal(r, &b)
}

// GetStickerSet Use this method to get a sticker set. On success, a StickerSet object is returned.
// - name (type string): Name of the sticker set
// https://core.telegram.org/bots/api#getstickerset
func (bot *Bot) GetStickerSet(name string) (*StickerSet, error) {
	v := urlLib.Values{}
	v.Add("name", name)

	r, err := bot.Get("getStickerSet", v)
	if err != nil {
		return nil, err
	}

	var s StickerSet
	return &s, json.Unmarshal(r, &s)
}

// GetUpdatesOpts is the set of optional fields for Bot.GetUpdates.
type GetUpdatesOpts struct {
	// Identifier of the first update to be returned. Must be greater by one than the highest among the identifiers of previously received updates. By default, updates starting with the earliest unconfirmed update are returned. An update is considered confirmed as soon as getUpdates is called with an offset higher than its update_id. The negative offset can be specified to retrieve updates starting from -offset update from the end of the updates queue. All previous updates will forgotten.
	Offset int64
	// Limits the number of updates to be retrieved. Values between 1-100 are accepted. Defaults to 100.
	Limit int64
	// Timeout in seconds for long polling. Defaults to 0, i.e. usual short polling. Should be positive, short polling should be used for testing purposes only.
	Timeout int64
	// A JSON-serialized list of the update types you want your bot to receive. For example, specify ["message", "edited_channel_post", "callback_query"] to only receive updates of these types. See Update for a complete list of available update types. Specify an empty list to receive all update types except chat_member (default). If not specified, the previous setting will be used. Please note that this parameter doesn't affect updates created before the call to the getUpdates, so unwanted updates may be received for a short period of time.
	AllowedUpdates []string
}

// GetUpdates Use this method to receive incoming updates using long polling (wiki). An Array of Update objects is returned.
// - opts (type GetUpdatesOpts): All optional parameters.
// https://core.telegram.org/bots/api#getupdates
func (bot *Bot) GetUpdates(opts *GetUpdatesOpts) ([]Update, error) {
	v := urlLib.Values{}
	if opts != nil {
		if opts.Offset != 0 {
			v.Add("offset", strconv.FormatInt(opts.Offset, 10))
		}
		if opts.Limit != 0 {
			v.Add("limit", strconv.FormatInt(opts.Limit, 10))
		}
		if opts.Timeout != 0 {
			v.Add("timeout", strconv.FormatInt(opts.Timeout, 10))
		}
		if opts.AllowedUpdates != nil {
			bs, err := json.Marshal(opts.AllowedUpdates)
			if err != nil {
				return nil, fmt.Errorf("failed to marshal field allowed_updates: %w", err)
			}
			v.Add("allowed_updates", string(bs))
		}
	}

	r, err := bot.Get("getUpdates", v)
	if err != nil {
		return nil, err
	}

	var u []Update
	return u, json.Unmarshal(r, &u)
}

// GetUserProfilePhotosOpts is the set of optional fields for Bot.GetUserProfilePhotos.
type GetUserProfilePhotosOpts struct {
	// Sequential number of the first photo to be returned. By default, all photos are returned.
	Offset int64
	// Limits the number of photos to be retrieved. Values between 1-100 are accepted. Defaults to 100.
	Limit int64
}

// GetUserProfilePhotos Use this method to get a list of profile pictures for a user. Returns a UserProfilePhotos object.
// - user_id (type int64): Unique identifier of the target user
// - opts (type GetUserProfilePhotosOpts): All optional parameters.
// https://core.telegram.org/bots/api#getuserprofilephotos
func (bot *Bot) GetUserProfilePhotos(userId int64, opts *GetUserProfilePhotosOpts) (*UserProfilePhotos, error) {
	v := urlLib.Values{}
	if userId != 0 {
		v.Add("user_id", strconv.FormatInt(userId, 10))
	}
	if opts != nil {
		if opts.Offset != 0 {
			v.Add("offset", strconv.FormatInt(opts.Offset, 10))
		}
		if opts.Limit != 0 {
			v.Add("limit", strconv.FormatInt(opts.Limit, 10))
		}
	}

	r, err := bot.Get("getUserProfilePhotos", v)
	if err != nil {
		return nil, err
	}

	var u UserProfilePhotos
	return &u, json.Unmarshal(r, &u)
}

// GetWebhookInfo Use this method to get current webhook status. Requires no parameters. On success, returns a WebhookInfo object. If the bot is using getUpdates, will return an object with the url field empty.
// https://core.telegram.org/bots/api#getwebhookinfo
func (bot *Bot) GetWebhookInfo() (*WebhookInfo, error) {
	v := urlLib.Values{}

	r, err := bot.Get("getWebhookInfo", v)
	if err != nil {
		return nil, err
	}

	var w WebhookInfo
	return &w, json.Unmarshal(r, &w)
}

// LeaveChat Use this method for your bot to leave a group, supergroup or channel. Returns True on success.
// - chat_id (type int64): Unique identifier for the target chat or username of the target supergroup or channel (in the format @channelusername)
// https://core.telegram.org/bots/api#leavechat
func (bot *Bot) LeaveChat(chatId int64) (bool, error) {
	v := urlLib.Values{}
	if chatId != 0 {
		v.Add("chat_id", strconv.FormatInt(chatId, 10))
	}

	r, err := bot.Get("leaveChat", v)
	if err != nil {
		return false, err
	}

	var b bool
	return b, json.Unmarshal(r, &b)
}

// LogOut Use this method to log out from the cloud Bot API server before launching the bot locally. You must log out the bot before running it locally, otherwise there is no guarantee that the bot will receive updates. After a successful call, you can immediately log in on a local server, but will not be able to log in back to the cloud Bot API server for 10 minutes. Returns True on success. Requires no parameters.
// https://core.telegram.org/bots/api#logout
func (bot *Bot) LogOut() (bool, error) {
	v := urlLib.Values{}

	r, err := bot.Get("logOut", v)
	if err != nil {
		return false, err
	}

	var b bool
	return b, json.Unmarshal(r, &b)
}

// PinChatMessageOpts is the set of optional fields for Bot.PinChatMessage.
type PinChatMessageOpts struct {
	// Pass True, if it is not necessary to send a notification to all chat members about the new pinned message. Notifications are always disabled in channels and private chats.
	DisableNotification bool
}

// PinChatMessage Use this method to add a message to the list of pinned messages in a chat. If the chat is not a private chat, the bot must be an administrator in the chat for this to work and must have the 'can_pin_messages' admin right in a supergroup or 'can_edit_messages' admin right in a channel. Returns True on success.
// - chat_id (type int64): Unique identifier for the target chat or username of the target channel (in the format @channelusername)
// - message_id (type int64): Identifier of a message to pin
// - opts (type PinChatMessageOpts): All optional parameters.
// https://core.telegram.org/bots/api#pinchatmessage
func (bot *Bot) PinChatMessage(chatId int64, messageId int64, opts *PinChatMessageOpts) (bool, error) {
	v := urlLib.Values{}
	if chatId != 0 {
		v.Add("chat_id", strconv.FormatInt(chatId, 10))
	}
	if messageId != 0 {
		v.Add("message_id", strconv.FormatInt(messageId, 10))
	}
	if opts != nil {
		v.Add("disable_notification", strconv.FormatBool(opts.DisableNotification))
	}

	r, err := bot.Get("pinChatMessage", v)
	if err != nil {
		return false, err
	}

	var b bool
	return b, json.Unmarshal(r, &b)
}

// PromoteChatMemberOpts is the set of optional fields for Bot.PromoteChatMember.
type PromoteChatMemberOpts struct {
	// Pass True, if the administrator's presence in the chat is hidden
	IsAnonymous bool
	// Pass True, if the administrator can access the chat event log, chat statistics, message statistics in channels, see channel members, see anonymous administrators in supergroups and ignore slow mode. Implied by any other administrator privilege
	CanManageChat bool
	// Pass True, if the administrator can create channel posts, channels only
	CanPostMessages bool
	// Pass True, if the administrator can edit messages of other users and can pin messages, channels only
	CanEditMessages bool
	// Pass True, if the administrator can delete messages of other users
	CanDeleteMessages bool
	// Pass True, if the administrator can manage voice chats
	CanManageVoiceChats bool
	// Pass True, if the administrator can restrict, ban or unban chat members
	CanRestrictMembers bool
	// Pass True, if the administrator can add new administrators with a subset of their own privileges or demote administrators that he has promoted, directly or indirectly (promoted by administrators that were appointed by him)
	CanPromoteMembers bool
	// Pass True, if the administrator can change chat title, photo and other settings
	CanChangeInfo bool
	// Pass True, if the administrator can invite new users to the chat
	CanInviteUsers bool
	// Pass True, if the administrator can pin messages, supergroups only
	CanPinMessages bool
}

// PromoteChatMember Use this method to promote or demote a user in a supergroup or a channel. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Pass False for all boolean parameters to demote a user. Returns True on success.
// - chat_id (type int64): Unique identifier for the target chat or username of the target channel (in the format @channelusername)
// - user_id (type int64): Unique identifier of the target user
// - opts (type PromoteChatMemberOpts): All optional parameters.
// https://core.telegram.org/bots/api#promotechatmember
func (bot *Bot) PromoteChatMember(chatId int64, userId int64, opts *PromoteChatMemberOpts) (bool, error) {
	v := urlLib.Values{}
	if chatId != 0 {
		v.Add("chat_id", strconv.FormatInt(chatId, 10))
	}
	if userId != 0 {
		v.Add("user_id", strconv.FormatInt(userId, 10))
	}
	if opts != nil {
		v.Add("is_anonymous", strconv.FormatBool(opts.IsAnonymous))
		v.Add("can_manage_chat", strconv.FormatBool(opts.CanManageChat))
		v.Add("can_post_messages", strconv.FormatBool(opts.CanPostMessages))
		v.Add("can_edit_messages", strconv.FormatBool(opts.CanEditMessages))
		v.Add("can_delete_messages", strconv.FormatBool(opts.CanDeleteMessages))
		v.Add("can_manage_voice_chats", strconv.FormatBool(opts.CanManageVoiceChats))
		v.Add("can_restrict_members", strconv.FormatBool(opts.CanRestrictMembers))
		v.Add("can_promote_members", strconv.FormatBool(opts.CanPromoteMembers))
		v.Add("can_change_info", strconv.FormatBool(opts.CanChangeInfo))
		v.Add("can_invite_users", strconv.FormatBool(opts.CanInviteUsers))
		v.Add("can_pin_messages", strconv.FormatBool(opts.CanPinMessages))
	}

	r, err := bot.Get("promoteChatMember", v)
	if err != nil {
		return false, err
	}

	var b bool
	return b, json.Unmarshal(r, &b)
}

// RestrictChatMemberOpts is the set of optional fields for Bot.RestrictChatMember.
type RestrictChatMemberOpts struct {
	// Date when restrictions will be lifted for the user, unix time. If user is restricted for more than 366 days or less than 30 seconds from the current time, they are considered to be restricted forever
	UntilDate int64
}

// RestrictChatMember Use this method to restrict a user in a supergroup. The bot must be an administrator in the supergroup for this to work and must have the appropriate admin rights. Pass True for all permissions to lift restrictions from a user. Returns True on success.
// - chat_id (type int64): Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername)
// - user_id (type int64): Unique identifier of the target user
// - permissions (type ChatPermissions): A JSON-serialized object for new user permissions
// - opts (type RestrictChatMemberOpts): All optional parameters.
// https://core.telegram.org/bots/api#restrictchatmember
func (bot *Bot) RestrictChatMember(chatId int64, userId int64, permissions ChatPermissions, opts *RestrictChatMemberOpts) (bool, error) {
	v := urlLib.Values{}
	if chatId != 0 {
		v.Add("chat_id", strconv.FormatInt(chatId, 10))
	}
	if userId != 0 {
		v.Add("user_id", strconv.FormatInt(userId, 10))
	}
	bs, err := json.Marshal(permissions)
	if err != nil {
		return false, fmt.Errorf("failed to marshal field permissions: %w", err)
	}
	v.Add("permissions", string(bs))
	if opts != nil {
		if opts.UntilDate != 0 {
			v.Add("until_date", strconv.FormatInt(opts.UntilDate, 10))
		}
	}

	r, err := bot.Get("restrictChatMember", v)
	if err != nil {
		return false, err
	}

	var b bool
	return b, json.Unmarshal(r, &b)
}

// RevokeChatInviteLink Use this method to revoke an invite link created by the bot. If the primary link is revoked, a new link is automatically generated. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns the revoked invite link as ChatInviteLink object.
// - chat_id (type int64): Unique identifier of the target chat or username of the target channel (in the format @channelusername)
// - invite_link (type string): The invite link to revoke
// https://core.telegram.org/bots/api#revokechatinvitelink
func (bot *Bot) RevokeChatInviteLink(chatId int64, inviteLink string) (*ChatInviteLink, error) {
	v := urlLib.Values{}
	if chatId != 0 {
		v.Add("chat_id", strconv.FormatInt(chatId, 10))
	}
	v.Add("invite_link", inviteLink)

	r, err := bot.Get("revokeChatInviteLink", v)
	if err != nil {
		return nil, err
	}

	var c ChatInviteLink
	return &c, json.Unmarshal(r, &c)
}

// SendAnimationOpts is the set of optional fields for Bot.SendAnimation.
type SendAnimationOpts struct {
	// Duration of sent animation in seconds
	Duration int64
	// Animation width
	Width int64
	// Animation height
	Height int64
	// Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass "attach://<file_attach_name>" if the thumbnail was uploaded using multipart/form-data under <file_attach_name>. More info on Sending Files: https://core.telegram.org/bots/api#sending-files
	Thumb InputFile
	// Animation caption (may also be used when resending animation by file_id), 0-1024 characters after entities parsing
	Caption string
	// Mode for parsing entities in the animation caption. See formatting options for more details.
	ParseMode string
	// List of special entities that appear in the caption, which can be specified instead of parse_mode
	CaptionEntities []MessageEntity
	// Sends the message silently. Users will receive a notification with no sound.
	DisableNotification bool
	// If the message is a reply, ID of the original message
	ReplyToMessageId int64
	// Pass True, if the message should be sent even if the specified replied-to message is not found
	AllowSendingWithoutReply bool
	// Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove reply keyboard or to force a reply from the user.
	ReplyMarkup ReplyMarkup
}

// SendAnimation Use this method to send animation files (GIF or H.264/MPEG-4 AVC video without sound). On success, the sent Message is returned. Bots can currently send animation files of up to 50 MB in size, this limit may be changed in the future.
// - chat_id (type int64): Unique identifier for the target chat or username of the target channel (in the format @channelusername)
// - animation (type InputFile): Animation to send. Pass a file_id as String to send an animation that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get an animation from the Internet, or upload a new animation using multipart/form-data. More info on Sending Files: https://core.telegram.org/bots/api#sending-files
// - opts (type SendAnimationOpts): All optional parameters.
// https://core.telegram.org/bots/api#sendanimation
func (bot *Bot) SendAnimation(chatId int64, animation InputFile, opts *SendAnimationOpts) (*Message, error) {
	v := urlLib.Values{}
	data := map[string]NamedReader{}
	if chatId != 0 {
		v.Add("chat_id", strconv.FormatInt(chatId, 10))
	}
	if animation != nil {
		switch m := animation.(type) {
		case string:
			v.Add("animation", m)

		case NamedReader:
			v.Add("animation", "attach://animation")
			data["animation"] = m

		case io.Reader:
			v.Add("animation", "attach://animation")
			data["animation"] = NamedFile{File: m}

		case []byte:
			v.Add("animation", "attach://animation")
			data["animation"] = NamedFile{File: bytes.NewReader(m)}

		default:
			return nil, fmt.Errorf("unknown type for InputFile: %T", animation)
		}
	}
	if opts != nil {
		if opts.Duration != 0 {
			v.Add("duration", strconv.FormatInt(opts.Duration, 10))
		}
		if opts.Width != 0 {
			v.Add("width", strconv.FormatInt(opts.Width, 10))
		}
		if opts.Height != 0 {
			v.Add("height", strconv.FormatInt(opts.Height, 10))
		}
		if opts.Thumb != nil {
			switch m := opts.Thumb.(type) {
			case string:
				v.Add("thumb", m)

			case NamedReader:
				v.Add("thumb", "attach://thumb")
				data["thumb"] = m

			case io.Reader:
				v.Add("thumb", "attach://thumb")
				data["thumb"] = NamedFile{File: m}

			case []byte:
				v.Add("thumb", "attach://thumb")
				data["thumb"] = NamedFile{File: bytes.NewReader(m)}

			default:
				return nil, fmt.Errorf("unknown type for InputFile: %T", opts.Thumb)
			}
		}
		v.Add("caption", opts.Caption)
		v.Add("parse_mode", opts.ParseMode)
		if opts.CaptionEntities != nil {
			bs, err := json.Marshal(opts.CaptionEntities)
			if err != nil {
				return nil, fmt.Errorf("failed to marshal field caption_entities: %w", err)
			}
			v.Add("caption_entities", string(bs))
		}
		v.Add("disable_notification", strconv.FormatBool(opts.DisableNotification))
		if opts.ReplyToMessageId != 0 {
			v.Add("reply_to_message_id", strconv.FormatInt(opts.ReplyToMessageId, 10))
		}
		v.Add("allow_sending_without_reply", strconv.FormatBool(opts.AllowSendingWithoutReply))
		if opts.ReplyMarkup != nil {
			bs, err := json.Marshal(opts.ReplyMarkup)
			if err != nil {
				return nil, fmt.Errorf("failed to marshal field reply_markup: %w", err)
			}
			v.Add("reply_markup", string(bs))
		}
	}

	r, err := bot.Post("sendAnimation", v, data)
	if err != nil {
		return nil, err
	}

	var m Message
	return &m, json.Unmarshal(r, &m)
}

// SendAudioOpts is the set of optional fields for Bot.SendAudio.
type SendAudioOpts struct {
	// Audio caption, 0-1024 characters after entities parsing
	Caption string
	// Mode for parsing entities in the audio caption. See formatting options for more details.
	ParseMode string
	// List of special entities that appear in the caption, which can be specified instead of parse_mode
	CaptionEntities []MessageEntity
	// Duration of the audio in seconds
	Duration int64
	// Performer
	Performer string
	// Track name
	Title string
	// Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass "attach://<file_attach_name>" if the thumbnail was uploaded using multipart/form-data under <file_attach_name>. More info on Sending Files: https://core.telegram.org/bots/api#sending-files
	Thumb InputFile
	// Sends the message silently. Users will receive a notification with no sound.
	DisableNotification bool
	// If the message is a reply, ID of the original message
	ReplyToMessageId int64
	// Pass True, if the message should be sent even if the specified replied-to message is not found
	AllowSendingWithoutReply bool
	// Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove reply keyboard or to force a reply from the user.
	ReplyMarkup ReplyMarkup
}

// SendAudio Use this method to send audio files, if you want Telegram clients to display them in the music player. Your audio must be in the .MP3 or .M4A format. On success, the sent Message is returned. Bots can currently send audio files of up to 50 MB in size, this limit may be changed in the future.
// For sending voice messages, use the sendVoice method instead.
// - chat_id (type int64): Unique identifier for the target chat or username of the target channel (in the format @channelusername)
// - audio (type InputFile): Audio file to send. Pass a file_id as String to send an audio file that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get an audio file from the Internet, or upload a new one using multipart/form-data. More info on Sending Files: https://core.telegram.org/bots/api#sending-files
// - opts (type SendAudioOpts): All optional parameters.
// https://core.telegram.org/bots/api#sendaudio
func (bot *Bot) SendAudio(chatId int64, audio InputFile, opts *SendAudioOpts) (*Message, error) {
	v := urlLib.Values{}
	data := map[string]NamedReader{}
	if chatId != 0 {
		v.Add("chat_id", strconv.FormatInt(chatId, 10))
	}
	if audio != nil {
		switch m := audio.(type) {
		case string:
			v.Add("audio", m)

		case NamedReader:
			v.Add("audio", "attach://audio")
			data["audio"] = m

		case io.Reader:
			v.Add("audio", "attach://audio")
			data["audio"] = NamedFile{File: m}

		case []byte:
			v.Add("audio", "attach://audio")
			data["audio"] = NamedFile{File: bytes.NewReader(m)}

		default:
			return nil, fmt.Errorf("unknown type for InputFile: %T", audio)
		}
	}
	if opts != nil {
		v.Add("caption", opts.Caption)
		v.Add("parse_mode", opts.ParseMode)
		if opts.CaptionEntities != nil {
			bs, err := json.Marshal(opts.CaptionEntities)
			if err != nil {
				return nil, fmt.Errorf("failed to marshal field caption_entities: %w", err)
			}
			v.Add("caption_entities", string(bs))
		}
		if opts.Duration != 0 {
			v.Add("duration", strconv.FormatInt(opts.Duration, 10))
		}
		v.Add("performer", opts.Performer)
		v.Add("title", opts.Title)
		if opts.Thumb != nil {
			switch m := opts.Thumb.(type) {
			case string:
				v.Add("thumb", m)

			case NamedReader:
				v.Add("thumb", "attach://thumb")
				data["thumb"] = m

			case io.Reader:
				v.Add("thumb", "attach://thumb")
				data["thumb"] = NamedFile{File: m}

			case []byte:
				v.Add("thumb", "attach://thumb")
				data["thumb"] = NamedFile{File: bytes.NewReader(m)}

			default:
				return nil, fmt.Errorf("unknown type for InputFile: %T", opts.Thumb)
			}
		}
		v.Add("disable_notification", strconv.FormatBool(opts.DisableNotification))
		if opts.ReplyToMessageId != 0 {
			v.Add("reply_to_message_id", strconv.FormatInt(opts.ReplyToMessageId, 10))
		}
		v.Add("allow_sending_without_reply", strconv.FormatBool(opts.AllowSendingWithoutReply))
		if opts.ReplyMarkup != nil {
			bs, err := json.Marshal(opts.ReplyMarkup)
			if err != nil {
				return nil, fmt.Errorf("failed to marshal field reply_markup: %w", err)
			}
			v.Add("reply_markup", string(bs))
		}
	}

	r, err := bot.Post("sendAudio", v, data)
	if err != nil {
		return nil, err
	}

	var m Message
	return &m, json.Unmarshal(r, &m)
}

// SendChatAction Use this method when you need to tell the user that something is happening on the bot's side. The status is set for 5 seconds or less (when a message arrives from your bot, Telegram clients clear its typing status). Returns True on success.
// We only recommend using this method when a response from the bot will take a noticeable amount of time to arrive.
// - chat_id (type int64): Unique identifier for the target chat or username of the target channel (in the format @channelusername)
// - action (type string): Type of action to broadcast. Choose one, depending on what the user is about to receive: typing for text messages, upload_photo for photos, record_video or upload_video for videos, record_voice or upload_voice for voice notes, upload_document for general files, find_location for location data, record_video_note or upload_video_note for video notes.
// https://core.telegram.org/bots/api#sendchataction
func (bot *Bot) SendChatAction(chatId int64, action string) (bool, error) {
	v := urlLib.Values{}
	if chatId != 0 {
		v.Add("chat_id", strconv.FormatInt(chatId, 10))
	}
	v.Add("action", action)

	r, err := bot.Get("sendChatAction", v)
	if err != nil {
		return false, err
	}

	var b bool
	return b, json.Unmarshal(r, &b)
}

// SendContactOpts is the set of optional fields for Bot.SendContact.
type SendContactOpts struct {
	// Contact's last name
	LastName string
	// Additional data about the contact in the form of a vCard, 0-2048 bytes
	Vcard string
	// Sends the message silently. Users will receive a notification with no sound.
	DisableNotification bool
	// If the message is a reply, ID of the original message
	ReplyToMessageId int64
	// Pass True, if the message should be sent even if the specified replied-to message is not found
	AllowSendingWithoutReply bool
	// Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove keyboard or to force a reply from the user.
	ReplyMarkup ReplyMarkup
}

// SendContact Use this method to send phone contacts. On success, the sent Message is returned.
// - chat_id (type int64): Unique identifier for the target chat or username of the target channel (in the format @channelusername)
// - phone_number (type string): Contact's phone number
// - first_name (type string): Contact's first name
// - opts (type SendContactOpts): All optional parameters.
// https://core.telegram.org/bots/api#sendcontact
func (bot *Bot) SendContact(chatId int64, phoneNumber string, firstName string, opts *SendContactOpts) (*Message, error) {
	v := urlLib.Values{}
	if chatId != 0 {
		v.Add("chat_id", strconv.FormatInt(chatId, 10))
	}
	v.Add("phone_number", phoneNumber)
	v.Add("first_name", firstName)
	if opts != nil {
		v.Add("last_name", opts.LastName)
		v.Add("vcard", opts.Vcard)
		v.Add("disable_notification", strconv.FormatBool(opts.DisableNotification))
		if opts.ReplyToMessageId != 0 {
			v.Add("reply_to_message_id", strconv.FormatInt(opts.ReplyToMessageId, 10))
		}
		v.Add("allow_sending_without_reply", strconv.FormatBool(opts.AllowSendingWithoutReply))
		if opts.ReplyMarkup != nil {
			bs, err := json.Marshal(opts.ReplyMarkup)
			if err != nil {
				return nil, fmt.Errorf("failed to marshal field reply_markup: %w", err)
			}
			v.Add("reply_markup", string(bs))
		}
	}

	r, err := bot.Get("sendContact", v)
	if err != nil {
		return nil, err
	}

	var m Message
	return &m, json.Unmarshal(r, &m)
}

// SendDiceOpts is the set of optional fields for Bot.SendDice.
type SendDiceOpts struct {
	// Emoji on which the dice throw animation is based. Currently, must be one of "🎲", "🎯", "🏀", "⚽", "🎳", or "🎰". Dice can have values 1-6 for "🎲", "🎯" and "🎳", values 1-5 for "🏀" and "⚽", and values 1-64 for "🎰". Defaults to "🎲"
	Emoji string
	// Sends the message silently. Users will receive a notification with no sound.
	DisableNotification bool
	// If the message is a reply, ID of the original message
	ReplyToMessageId int64
	// Pass True, if the message should be sent even if the specified replied-to message is not found
	AllowSendingWithoutReply bool
	// Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove reply keyboard or to force a reply from the user.
	ReplyMarkup ReplyMarkup
}

// SendDice Use this method to send an animated emoji that will display a random value. On success, the sent Message is returned.
// - chat_id (type int64): Unique identifier for the target chat or username of the target channel (in the format @channelusername)
// - opts (type SendDiceOpts): All optional parameters.
// https://core.telegram.org/bots/api#senddice
func (bot *Bot) SendDice(chatId int64, opts *SendDiceOpts) (*Message, error) {
	v := urlLib.Values{}
	if chatId != 0 {
		v.Add("chat_id", strconv.FormatInt(chatId, 10))
	}
	if opts != nil {
		v.Add("emoji", opts.Emoji)
		v.Add("disable_notification", strconv.FormatBool(opts.DisableNotification))
		if opts.ReplyToMessageId != 0 {
			v.Add("reply_to_message_id", strconv.FormatInt(opts.ReplyToMessageId, 10))
		}
		v.Add("allow_sending_without_reply", strconv.FormatBool(opts.AllowSendingWithoutReply))
		if opts.ReplyMarkup != nil {
			bs, err := json.Marshal(opts.ReplyMarkup)
			if err != nil {
				return nil, fmt.Errorf("failed to marshal field reply_markup: %w", err)
			}
			v.Add("reply_markup", string(bs))
		}
	}

	r, err := bot.Get("sendDice", v)
	if err != nil {
		return nil, err
	}

	var m Message
	return &m, json.Unmarshal(r, &m)
}

// SendDocumentOpts is the set of optional fields for Bot.SendDocument.
type SendDocumentOpts struct {
	// Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass "attach://<file_attach_name>" if the thumbnail was uploaded using multipart/form-data under <file_attach_name>. More info on Sending Files: https://core.telegram.org/bots/api#sending-files
	Thumb InputFile
	// Document caption (may also be used when resending documents by file_id), 0-1024 characters after entities parsing
	Caption string
	// Mode for parsing entities in the document caption. See formatting options for more details.
	ParseMode string
	// List of special entities that appear in the caption, which can be specified instead of parse_mode
	CaptionEntities []MessageEntity
	// Disables automatic server-side content type detection for files uploaded using multipart/form-data
	DisableContentTypeDetection bool
	// Sends the message silently. Users will receive a notification with no sound.
	DisableNotification bool
	// If the message is a reply, ID of the original message
	ReplyToMessageId int64
	// Pass True, if the message should be sent even if the specified replied-to message is not found
	AllowSendingWithoutReply bool
	// Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove reply keyboard or to force a reply from the user.
	ReplyMarkup ReplyMarkup
}

// SendDocument Use this method to send general files. On success, the sent Message is returned. Bots can currently send files of any type of up to 50 MB in size, this limit may be changed in the future.
// - chat_id (type int64): Unique identifier for the target chat or username of the target channel (in the format @channelusername)
// - document (type InputFile): File to send. Pass a file_id as String to send a file that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get a file from the Internet, or upload a new one using multipart/form-data. More info on Sending Files: https://core.telegram.org/bots/api#sending-files
// - opts (type SendDocumentOpts): All optional parameters.
// https://core.telegram.org/bots/api#senddocument
func (bot *Bot) SendDocument(chatId int64, document InputFile, opts *SendDocumentOpts) (*Message, error) {
	v := urlLib.Values{}
	data := map[string]NamedReader{}
	if chatId != 0 {
		v.Add("chat_id", strconv.FormatInt(chatId, 10))
	}
	if document != nil {
		switch m := document.(type) {
		case string:
			v.Add("document", m)

		case NamedReader:
			v.Add("document", "attach://document")
			data["document"] = m

		case io.Reader:
			v.Add("document", "attach://document")
			data["document"] = NamedFile{File: m}

		case []byte:
			v.Add("document", "attach://document")
			data["document"] = NamedFile{File: bytes.NewReader(m)}

		default:
			return nil, fmt.Errorf("unknown type for InputFile: %T", document)
		}
	}
	if opts != nil {
		if opts.Thumb != nil {
			switch m := opts.Thumb.(type) {
			case string:
				v.Add("thumb", m)

			case NamedReader:
				v.Add("thumb", "attach://thumb")
				data["thumb"] = m

			case io.Reader:
				v.Add("thumb", "attach://thumb")
				data["thumb"] = NamedFile{File: m}

			case []byte:
				v.Add("thumb", "attach://thumb")
				data["thumb"] = NamedFile{File: bytes.NewReader(m)}

			default:
				return nil, fmt.Errorf("unknown type for InputFile: %T", opts.Thumb)
			}
		}
		v.Add("caption", opts.Caption)
		v.Add("parse_mode", opts.ParseMode)
		if opts.CaptionEntities != nil {
			bs, err := json.Marshal(opts.CaptionEntities)
			if err != nil {
				return nil, fmt.Errorf("failed to marshal field caption_entities: %w", err)
			}
			v.Add("caption_entities", string(bs))
		}
		v.Add("disable_content_type_detection", strconv.FormatBool(opts.DisableContentTypeDetection))
		v.Add("disable_notification", strconv.FormatBool(opts.DisableNotification))
		if opts.ReplyToMessageId != 0 {
			v.Add("reply_to_message_id", strconv.FormatInt(opts.ReplyToMessageId, 10))
		}
		v.Add("allow_sending_without_reply", strconv.FormatBool(opts.AllowSendingWithoutReply))
		if opts.ReplyMarkup != nil {
			bs, err := json.Marshal(opts.ReplyMarkup)
			if err != nil {
				return nil, fmt.Errorf("failed to marshal field reply_markup: %w", err)
			}
			v.Add("reply_markup", string(bs))
		}
	}

	r, err := bot.Post("sendDocument", v, data)
	if err != nil {
		return nil, err
	}

	var m Message
	return &m, json.Unmarshal(r, &m)
}

// SendGameOpts is the set of optional fields for Bot.SendGame.
type SendGameOpts struct {
	// Sends the message silently. Users will receive a notification with no sound.
	DisableNotification bool
	// If the message is a reply, ID of the original message
	ReplyToMessageId int64
	// Pass True, if the message should be sent even if the specified replied-to message is not found
	AllowSendingWithoutReply bool
	// A JSON-serialized object for an inline keyboard. If empty, one 'Play game_title' button will be shown. If not empty, the first button must launch the game.
	ReplyMarkup InlineKeyboardMarkup
}

// SendGame Use this method to send a game. On success, the sent Message is returned.
// - chat_id (type int64): Unique identifier for the target chat
// - game_short_name (type string): Short name of the game, serves as the unique identifier for the game. Set up your games via Botfather.
// - opts (type SendGameOpts): All optional parameters.
// https://core.telegram.org/bots/api#sendgame
func (bot *Bot) SendGame(chatId int64, gameShortName string, opts *SendGameOpts) (*Message, error) {
	v := urlLib.Values{}
	if chatId != 0 {
		v.Add("chat_id", strconv.FormatInt(chatId, 10))
	}
	v.Add("game_short_name", gameShortName)
	if opts != nil {
		v.Add("disable_notification", strconv.FormatBool(opts.DisableNotification))
		if opts.ReplyToMessageId != 0 {
			v.Add("reply_to_message_id", strconv.FormatInt(opts.ReplyToMessageId, 10))
		}
		v.Add("allow_sending_without_reply", strconv.FormatBool(opts.AllowSendingWithoutReply))
		bs, err := json.Marshal(opts.ReplyMarkup)
		if err != nil {
			return nil, fmt.Errorf("failed to marshal field reply_markup: %w", err)
		}
		v.Add("reply_markup", string(bs))
	}

	r, err := bot.Get("sendGame", v)
	if err != nil {
		return nil, err
	}

	var m Message
	return &m, json.Unmarshal(r, &m)
}

// SendInvoiceOpts is the set of optional fields for Bot.SendInvoice.
type SendInvoiceOpts struct {
	// The maximum accepted amount for tips in the smallest units of the currency (integer, not float/double). For example, for a maximum tip of US$ 1.45 pass max_tip_amount = 145. See the exp parameter in currencies.json, it shows the number of digits past the decimal point for each currency (2 for the majority of currencies). Defaults to 0
	MaxTipAmount int64
	// A JSON-serialized array of suggested amounts of tips in the smallest units of the currency (integer, not float/double). At most 4 suggested tip amounts can be specified. The suggested tip amounts must be positive, passed in a strictly increased order and must not exceed max_tip_amount.
	SuggestedTipAmounts []int64
	// Unique deep-linking parameter. If left empty, forwarded copies of the sent message will have a Pay button, allowing multiple users to pay directly from the forwarded message, using the same invoice. If non-empty, forwarded copies of the sent message will have a URL button with a deep link to the bot (instead of a Pay button), with the value used as the start parameter
	StartParameter string
	// A JSON-serialized data about the invoice, which will be shared with the payment provider. A detailed description of required fields should be provided by the payment provider.
	ProviderData string
	// URL of the product photo for the invoice. Can be a photo of the goods or a marketing image for a service. People like it better when they see what they are paying for.
	PhotoUrl string
	// Photo size
	PhotoSize int64
	// Photo width
	PhotoWidth int64
	// Photo height
	PhotoHeight int64
	// Pass True, if you require the user's full name to complete the order
	NeedName bool
	// Pass True, if you require the user's phone number to complete the order
	NeedPhoneNumber bool
	// Pass True, if you require the user's email address to complete the order
	NeedEmail bool
	// Pass True, if you require the user's shipping address to complete the order
	NeedShippingAddress bool
	// Pass True, if user's phone number should be sent to provider
	SendPhoneNumberToProvider bool
	// Pass True, if user's email address should be sent to provider
	SendEmailToProvider bool
	// Pass True, if the final price depends on the shipping method
	IsFlexible bool
	// Sends the message silently. Users will receive a notification with no sound.
	DisableNotification bool
	// If the message is a reply, ID of the original message
	ReplyToMessageId int64
	// Pass True, if the message should be sent even if the specified replied-to message is not found
	AllowSendingWithoutReply bool
	// A JSON-serialized object for an inline keyboard. If empty, one 'Pay total price' button will be shown. If not empty, the first button must be a Pay button.
	ReplyMarkup InlineKeyboardMarkup
}

// SendInvoice Use this method to send invoices. On success, the sent Message is returned.
// - chat_id (type int64): Unique identifier for the target chat or username of the target channel (in the format @channelusername)
// - title (type string): Product name, 1-32 characters
// - description (type string): Product description, 1-255 characters
// - payload (type string): Bot-defined invoice payload, 1-128 bytes. This will not be displayed to the user, use for your internal processes.
// - provider_token (type string): Payments provider token, obtained via Botfather
// - currency (type string): Three-letter ISO 4217 currency code, see more on currencies
// - prices (type []LabeledPrice): Price breakdown, a JSON-serialized list of components (e.g. product price, tax, discount, delivery cost, delivery tax, bonus, etc.)
// - opts (type SendInvoiceOpts): All optional parameters.
// https://core.telegram.org/bots/api#sendinvoice
func (bot *Bot) SendInvoice(chatId int64, title string, description string, payload string, providerToken string, currency string, prices []LabeledPrice, opts *SendInvoiceOpts) (*Message, error) {
	v := urlLib.Values{}
	if chatId != 0 {
		v.Add("chat_id", strconv.FormatInt(chatId, 10))
	}
	v.Add("title", title)
	v.Add("description", description)
	v.Add("payload", payload)
	v.Add("provider_token", providerToken)
	v.Add("currency", currency)
	if prices != nil {
		bs, err := json.Marshal(prices)
		if err != nil {
			return nil, fmt.Errorf("failed to marshal field prices: %w", err)
		}
		v.Add("prices", string(bs))
	}
	if opts != nil {
		if opts.MaxTipAmount != 0 {
			v.Add("max_tip_amount", strconv.FormatInt(opts.MaxTipAmount, 10))
		}
		if opts.SuggestedTipAmounts != nil {
			bs, err := json.Marshal(opts.SuggestedTipAmounts)
			if err != nil {
				return nil, fmt.Errorf("failed to marshal field suggested_tip_amounts: %w", err)
			}
			v.Add("suggested_tip_amounts", string(bs))
		}
		v.Add("start_parameter", opts.StartParameter)
		v.Add("provider_data", opts.ProviderData)
		v.Add("photo_url", opts.PhotoUrl)
		if opts.PhotoSize != 0 {
			v.Add("photo_size", strconv.FormatInt(opts.PhotoSize, 10))
		}
		if opts.PhotoWidth != 0 {
			v.Add("photo_width", strconv.FormatInt(opts.PhotoWidth, 10))
		}
		if opts.PhotoHeight != 0 {
			v.Add("photo_height", strconv.FormatInt(opts.PhotoHeight, 10))
		}
		v.Add("need_name", strconv.FormatBool(opts.NeedName))
		v.Add("need_phone_number", strconv.FormatBool(opts.NeedPhoneNumber))
		v.Add("need_email", strconv.FormatBool(opts.NeedEmail))
		v.Add("need_shipping_address", strconv.FormatBool(opts.NeedShippingAddress))
		v.Add("send_phone_number_to_provider", strconv.FormatBool(opts.SendPhoneNumberToProvider))
		v.Add("send_email_to_provider", strconv.FormatBool(opts.SendEmailToProvider))
		v.Add("is_flexible", strconv.FormatBool(opts.IsFlexible))
		v.Add("disable_notification", strconv.FormatBool(opts.DisableNotification))
		if opts.ReplyToMessageId != 0 {
			v.Add("reply_to_message_id", strconv.FormatInt(opts.ReplyToMessageId, 10))
		}
		v.Add("allow_sending_without_reply", strconv.FormatBool(opts.AllowSendingWithoutReply))
		bs, err := json.Marshal(opts.ReplyMarkup)
		if err != nil {
			return nil, fmt.Errorf("failed to marshal field reply_markup: %w", err)
		}
		v.Add("reply_markup", string(bs))
	}

	r, err := bot.Get("sendInvoice", v)
	if err != nil {
		return nil, err
	}

	var m Message
	return &m, json.Unmarshal(r, &m)
}

// SendLocationOpts is the set of optional fields for Bot.SendLocation.
type SendLocationOpts struct {
	// The radius of uncertainty for the location, measured in meters; 0-1500
	HorizontalAccuracy float64
	// Period in seconds for which the location will be updated (see Live Locations, should be between 60 and 86400.
	LivePeriod int64
	// For live locations, a direction in which the user is moving, in degrees. Must be between 1 and 360 if specified.
	Heading int64
	// For live locations, a maximum distance for proximity alerts about approaching another chat member, in meters. Must be between 1 and 100000 if specified.
	ProximityAlertRadius int64
	// Sends the message silently. Users will receive a notification with no sound.
	DisableNotification bool
	// If the message is a reply, ID of the original message
	ReplyToMessageId int64
	// Pass True, if the message should be sent even if the specified replied-to message is not found
	AllowSendingWithoutReply bool
	// Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove reply keyboard or to force a reply from the user.
	ReplyMarkup ReplyMarkup
}

// SendLocation Use this method to send point on the map. On success, the sent Message is returned.
// - chat_id (type int64): Unique identifier for the target chat or username of the target channel (in the format @channelusername)
// - latitude (type float64): Latitude of the location
// - longitude (type float64): Longitude of the location
// - opts (type SendLocationOpts): All optional parameters.
// https://core.telegram.org/bots/api#sendlocation
func (bot *Bot) SendLocation(chatId int64, latitude float64, longitude float64, opts *SendLocationOpts) (*Message, error) {
	v := urlLib.Values{}
	if chatId != 0 {
		v.Add("chat_id", strconv.FormatInt(chatId, 10))
	}
	if latitude != 0.0 {
		v.Add("latitude", strconv.FormatFloat(latitude, 'f', -1, 64))
	}
	if longitude != 0.0 {
		v.Add("longitude", strconv.FormatFloat(longitude, 'f', -1, 64))
	}
	if opts != nil {
		if opts.HorizontalAccuracy != 0.0 {
			v.Add("horizontal_accuracy", strconv.FormatFloat(opts.HorizontalAccuracy, 'f', -1, 64))
		}
		if opts.LivePeriod != 0 {
			v.Add("live_period", strconv.FormatInt(opts.LivePeriod, 10))
		}
		if opts.Heading != 0 {
			v.Add("heading", strconv.FormatInt(opts.Heading, 10))
		}
		if opts.ProximityAlertRadius != 0 {
			v.Add("proximity_alert_radius", strconv.FormatInt(opts.ProximityAlertRadius, 10))
		}
		v.Add("disable_notification", strconv.FormatBool(opts.DisableNotification))
		if opts.ReplyToMessageId != 0 {
			v.Add("reply_to_message_id", strconv.FormatInt(opts.ReplyToMessageId, 10))
		}
		v.Add("allow_sending_without_reply", strconv.FormatBool(opts.AllowSendingWithoutReply))
		if opts.ReplyMarkup != nil {
			bs, err := json.Marshal(opts.ReplyMarkup)
			if err != nil {
				return nil, fmt.Errorf("failed to marshal field reply_markup: %w", err)
			}
			v.Add("reply_markup", string(bs))
		}
	}

	r, err := bot.Get("sendLocation", v)
	if err != nil {
		return nil, err
	}

	var m Message
	return &m, json.Unmarshal(r, &m)
}

// SendMediaGroupOpts is the set of optional fields for Bot.SendMediaGroup.
type SendMediaGroupOpts struct {
	// Sends messages silently. Users will receive a notification with no sound.
	DisableNotification bool
	// If the messages are a reply, ID of the original message
	ReplyToMessageId int64
	// Pass True, if the message should be sent even if the specified replied-to message is not found
	AllowSendingWithoutReply bool
}

// SendMediaGroup Use this method to send a group of photos, videos, documents or audios as an album. Documents and audio files can be only grouped in an album with messages of the same type. On success, an array of Messages that were sent is returned.
// - chat_id (type int64): Unique identifier for the target chat or username of the target channel (in the format @channelusername)
// - media (type []InputMedia): A JSON-serialized array describing messages to be sent, must include 2-10 items
// - opts (type SendMediaGroupOpts): All optional parameters.
// https://core.telegram.org/bots/api#sendmediagroup
func (bot *Bot) SendMediaGroup(chatId int64, media []InputMedia, opts *SendMediaGroupOpts) ([]Message, error) {
	v := urlLib.Values{}
	data := map[string]NamedReader{}
	if chatId != 0 {
		v.Add("chat_id", strconv.FormatInt(chatId, 10))
	}
	if media != nil {
		var rawList []json.RawMessage
		for idx, im := range media {
			inputMediaBs, err := im.InputMediaParams("media"+strconv.Itoa(idx), data)
			if err != nil {
				return nil, fmt.Errorf("failed to marshal InputMedia list item %d for field media: %w", idx, err)
			}
			rawList = append(rawList, inputMediaBs)
		}
		bs, err := json.Marshal(rawList)
		if err != nil {
			return nil, fmt.Errorf("failed to marshal raw json list of InputMedia for field: media %w", err)
		}
		v.Add("media", string(bs))
	}
	if opts != nil {
		v.Add("disable_notification", strconv.FormatBool(opts.DisableNotification))
		if opts.ReplyToMessageId != 0 {
			v.Add("reply_to_message_id", strconv.FormatInt(opts.ReplyToMessageId, 10))
		}
		v.Add("allow_sending_without_reply", strconv.FormatBool(opts.AllowSendingWithoutReply))
	}

	r, err := bot.Post("sendMediaGroup", v, data)
	if err != nil {
		return nil, err
	}

	var m []Message
	return m, json.Unmarshal(r, &m)
}

// SendMessageOpts is the set of optional fields for Bot.SendMessage.
type SendMessageOpts struct {
	// Mode for parsing entities in the message text. See formatting options for more details.
	ParseMode string
	// List of special entities that appear in message text, which can be specified instead of parse_mode
	Entities []MessageEntity
	// Disables link previews for links in this message
	DisableWebPagePreview bool
	// Sends the message silently. Users will receive a notification with no sound.
	DisableNotification bool
	// If the message is a reply, ID of the original message
	ReplyToMessageId int64
	// Pass True, if the message should be sent even if the specified replied-to message is not found
	AllowSendingWithoutReply bool
	// Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove reply keyboard or to force a reply from the user.
	ReplyMarkup ReplyMarkup
}

// SendMessage Use this method to send text messages. On success, the sent Message is returned.
// - chat_id (type int64): Unique identifier for the target chat or username of the target channel (in the format @channelusername)
// - text (type string): Text of the message to be sent, 1-4096 characters after entities parsing
// - opts (type SendMessageOpts): All optional parameters.
// https://core.telegram.org/bots/api#sendmessage
func (bot *Bot) SendMessage(chatId int64, text string, opts *SendMessageOpts) (*Message, error) {
	v := urlLib.Values{}
	if chatId != 0 {
		v.Add("chat_id", strconv.FormatInt(chatId, 10))
	}
	v.Add("text", text)
	if opts != nil {
		v.Add("parse_mode", opts.ParseMode)
		if opts.Entities != nil {
			bs, err := json.Marshal(opts.Entities)
			if err != nil {
				return nil, fmt.Errorf("failed to marshal field entities: %w", err)
			}
			v.Add("entities", string(bs))
		}
		v.Add("disable_web_page_preview", strconv.FormatBool(opts.DisableWebPagePreview))
		v.Add("disable_notification", strconv.FormatBool(opts.DisableNotification))
		if opts.ReplyToMessageId != 0 {
			v.Add("reply_to_message_id", strconv.FormatInt(opts.ReplyToMessageId, 10))
		}
		v.Add("allow_sending_without_reply", strconv.FormatBool(opts.AllowSendingWithoutReply))
		if opts.ReplyMarkup != nil {
			bs, err := json.Marshal(opts.ReplyMarkup)
			if err != nil {
				return nil, fmt.Errorf("failed to marshal field reply_markup: %w", err)
			}
			v.Add("reply_markup", string(bs))
		}
	}

	r, err := bot.Get("sendMessage", v)
	if err != nil {
		return nil, err
	}

	var m Message
	return &m, json.Unmarshal(r, &m)
}

// SendPhotoOpts is the set of optional fields for Bot.SendPhoto.
type SendPhotoOpts struct {
	// Photo caption (may also be used when resending photos by file_id), 0-1024 characters after entities parsing
	Caption string
	// Mode for parsing entities in the photo caption. See formatting options for more details.
	ParseMode string
	// List of special entities that appear in the caption, which can be specified instead of parse_mode
	CaptionEntities []MessageEntity
	// Sends the message silently. Users will receive a notification with no sound.
	DisableNotification bool
	// If the message is a reply, ID of the original message
	ReplyToMessageId int64
	// Pass True, if the message should be sent even if the specified replied-to message is not found
	AllowSendingWithoutReply bool
	// Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove reply keyboard or to force a reply from the user.
	ReplyMarkup ReplyMarkup
}

// SendPhoto Use this method to send photos. On success, the sent Message is returned.
// - chat_id (type int64): Unique identifier for the target chat or username of the target channel (in the format @channelusername)
// - photo (type InputFile): Photo to send. Pass a file_id as String to send a photo that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get a photo from the Internet, or upload a new photo using multipart/form-data. The photo must be at most 10 MB in size. The photo's width and height must not exceed 10000 in total. Width and height ratio must be at most 20. More info on Sending Files: https://core.telegram.org/bots/api#sending-files
// - opts (type SendPhotoOpts): All optional parameters.
// https://core.telegram.org/bots/api#sendphoto
func (bot *Bot) SendPhoto(chatId int64, photo InputFile, opts *SendPhotoOpts) (*Message, error) {
	v := urlLib.Values{}
	data := map[string]NamedReader{}
	if chatId != 0 {
		v.Add("chat_id", strconv.FormatInt(chatId, 10))
	}
	if photo != nil {
		switch m := photo.(type) {
		case string:
			v.Add("photo", m)

		case NamedReader:
			v.Add("photo", "attach://photo")
			data["photo"] = m

		case io.Reader:
			v.Add("photo", "attach://photo")
			data["photo"] = NamedFile{File: m}

		case []byte:
			v.Add("photo", "attach://photo")
			data["photo"] = NamedFile{File: bytes.NewReader(m)}

		default:
			return nil, fmt.Errorf("unknown type for InputFile: %T", photo)
		}
	}
	if opts != nil {
		v.Add("caption", opts.Caption)
		v.Add("parse_mode", opts.ParseMode)
		if opts.CaptionEntities != nil {
			bs, err := json.Marshal(opts.CaptionEntities)
			if err != nil {
				return nil, fmt.Errorf("failed to marshal field caption_entities: %w", err)
			}
			v.Add("caption_entities", string(bs))
		}
		v.Add("disable_notification", strconv.FormatBool(opts.DisableNotification))
		if opts.ReplyToMessageId != 0 {
			v.Add("reply_to_message_id", strconv.FormatInt(opts.ReplyToMessageId, 10))
		}
		v.Add("allow_sending_without_reply", strconv.FormatBool(opts.AllowSendingWithoutReply))
		if opts.ReplyMarkup != nil {
			bs, err := json.Marshal(opts.ReplyMarkup)
			if err != nil {
				return nil, fmt.Errorf("failed to marshal field reply_markup: %w", err)
			}
			v.Add("reply_markup", string(bs))
		}
	}

	r, err := bot.Post("sendPhoto", v, data)
	if err != nil {
		return nil, err
	}

	var m Message
	return &m, json.Unmarshal(r, &m)
}

// SendPollOpts is the set of optional fields for Bot.SendPoll.
type SendPollOpts struct {
	// True, if the poll needs to be anonymous, defaults to True
	IsAnonymous bool
	// Poll type, "quiz" or "regular", defaults to "regular"
	Type string
	// True, if the poll allows multiple answers, ignored for polls in quiz mode, defaults to False
	AllowsMultipleAnswers bool
	// 0-based identifier of the correct answer option, required for polls in quiz mode
	CorrectOptionId int64
	// Text that is shown when a user chooses an incorrect answer or taps on the lamp icon in a quiz-style poll, 0-200 characters with at most 2 line feeds after entities parsing
	Explanation string
	// Mode for parsing entities in the explanation. See formatting options for more details.
	ExplanationParseMode string
	// List of special entities that appear in the poll explanation, which can be specified instead of parse_mode
	ExplanationEntities []MessageEntity
	// Amount of time in seconds the poll will be active after creation, 5-600. Can't be used together with close_date.
	OpenPeriod int64
	// Point in time (Unix timestamp) when the poll will be automatically closed. Must be at least 5 and no more than 600 seconds in the future. Can't be used together with open_period.
	CloseDate int64
	// Pass True, if the poll needs to be immediately closed. This can be useful for poll preview.
	IsClosed bool
	// Sends the message silently. Users will receive a notification with no sound.
	DisableNotification bool
	// If the message is a reply, ID of the original message
	ReplyToMessageId int64
	// Pass True, if the message should be sent even if the specified replied-to message is not found
	AllowSendingWithoutReply bool
	// Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove reply keyboard or to force a reply from the user.
	ReplyMarkup ReplyMarkup
}

// SendPoll Use this method to send a native poll. On success, the sent Message is returned.
// - chat_id (type int64): Unique identifier for the target chat or username of the target channel (in the format @channelusername)
// - question (type string): Poll question, 1-300 characters
// - options (type []string): A JSON-serialized list of answer options, 2-10 strings 1-100 characters each
// - opts (type SendPollOpts): All optional parameters.
// https://core.telegram.org/bots/api#sendpoll
func (bot *Bot) SendPoll(chatId int64, question string, options []string, opts *SendPollOpts) (*Message, error) {
	v := urlLib.Values{}
	if chatId != 0 {
		v.Add("chat_id", strconv.FormatInt(chatId, 10))
	}
	v.Add("question", question)
	if options != nil {
		bs, err := json.Marshal(options)
		if err != nil {
			return nil, fmt.Errorf("failed to marshal field options: %w", err)
		}
		v.Add("options", string(bs))
	}
	if opts != nil {
		v.Add("is_anonymous", strconv.FormatBool(opts.IsAnonymous))
		v.Add("type", opts.Type)
		v.Add("allows_multiple_answers", strconv.FormatBool(opts.AllowsMultipleAnswers))
		if opts.CorrectOptionId != 0 {
			v.Add("correct_option_id", strconv.FormatInt(opts.CorrectOptionId, 10))
		}
		v.Add("explanation", opts.Explanation)
		v.Add("explanation_parse_mode", opts.ExplanationParseMode)
		if opts.ExplanationEntities != nil {
			bs, err := json.Marshal(opts.ExplanationEntities)
			if err != nil {
				return nil, fmt.Errorf("failed to marshal field explanation_entities: %w", err)
			}
			v.Add("explanation_entities", string(bs))
		}
		if opts.OpenPeriod != 0 {
			v.Add("open_period", strconv.FormatInt(opts.OpenPeriod, 10))
		}
		if opts.CloseDate != 0 {
			v.Add("close_date", strconv.FormatInt(opts.CloseDate, 10))
		}
		v.Add("is_closed", strconv.FormatBool(opts.IsClosed))
		v.Add("disable_notification", strconv.FormatBool(opts.DisableNotification))
		if opts.ReplyToMessageId != 0 {
			v.Add("reply_to_message_id", strconv.FormatInt(opts.ReplyToMessageId, 10))
		}
		v.Add("allow_sending_without_reply", strconv.FormatBool(opts.AllowSendingWithoutReply))
		if opts.ReplyMarkup != nil {
			bs, err := json.Marshal(opts.ReplyMarkup)
			if err != nil {
				return nil, fmt.Errorf("failed to marshal field reply_markup: %w", err)
			}
			v.Add("reply_markup", string(bs))
		}
	}

	r, err := bot.Get("sendPoll", v)
	if err != nil {
		return nil, err
	}

	var m Message
	return &m, json.Unmarshal(r, &m)
}

// SendStickerOpts is the set of optional fields for Bot.SendSticker.
type SendStickerOpts struct {
	// Sends the message silently. Users will receive a notification with no sound.
	DisableNotification bool
	// If the message is a reply, ID of the original message
	ReplyToMessageId int64
	// Pass True, if the message should be sent even if the specified replied-to message is not found
	AllowSendingWithoutReply bool
	// Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove reply keyboard or to force a reply from the user.
	ReplyMarkup ReplyMarkup
}

// SendSticker Use this method to send static .WEBP or animated .TGS stickers. On success, the sent Message is returned.
// - chat_id (type int64): Unique identifier for the target chat or username of the target channel (in the format @channelusername)
// - sticker (type InputFile): Sticker to send. Pass a file_id as String to send a file that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get a .WEBP file from the Internet, or upload a new one using multipart/form-data. More info on Sending Files: https://core.telegram.org/bots/api#sending-files
// - opts (type SendStickerOpts): All optional parameters.
// https://core.telegram.org/bots/api#sendsticker
func (bot *Bot) SendSticker(chatId int64, sticker InputFile, opts *SendStickerOpts) (*Message, error) {
	v := urlLib.Values{}
	data := map[string]NamedReader{}
	if chatId != 0 {
		v.Add("chat_id", strconv.FormatInt(chatId, 10))
	}
	if sticker != nil {
		switch m := sticker.(type) {
		case string:
			v.Add("sticker", m)

		case NamedReader:
			v.Add("sticker", "attach://sticker")
			data["sticker"] = m

		case io.Reader:
			v.Add("sticker", "attach://sticker")
			data["sticker"] = NamedFile{File: m}

		case []byte:
			v.Add("sticker", "attach://sticker")
			data["sticker"] = NamedFile{File: bytes.NewReader(m)}

		default:
			return nil, fmt.Errorf("unknown type for InputFile: %T", sticker)
		}
	}
	if opts != nil {
		v.Add("disable_notification", strconv.FormatBool(opts.DisableNotification))
		if opts.ReplyToMessageId != 0 {
			v.Add("reply_to_message_id", strconv.FormatInt(opts.ReplyToMessageId, 10))
		}
		v.Add("allow_sending_without_reply", strconv.FormatBool(opts.AllowSendingWithoutReply))
		if opts.ReplyMarkup != nil {
			bs, err := json.Marshal(opts.ReplyMarkup)
			if err != nil {
				return nil, fmt.Errorf("failed to marshal field reply_markup: %w", err)
			}
			v.Add("reply_markup", string(bs))
		}
	}

	r, err := bot.Post("sendSticker", v, data)
	if err != nil {
		return nil, err
	}

	var m Message
	return &m, json.Unmarshal(r, &m)
}

// SendVenueOpts is the set of optional fields for Bot.SendVenue.
type SendVenueOpts struct {
	// Foursquare identifier of the venue
	FoursquareId string
	// Foursquare type of the venue, if known. (For example, "arts_entertainment/default", "arts_entertainment/aquarium" or "food/icecream".)
	FoursquareType string
	// Google Places identifier of the venue
	GooglePlaceId string
	// Google Places type of the venue. (See supported types.)
	GooglePlaceType string
	// Sends the message silently. Users will receive a notification with no sound.
	DisableNotification bool
	// If the message is a reply, ID of the original message
	ReplyToMessageId int64
	// Pass True, if the message should be sent even if the specified replied-to message is not found
	AllowSendingWithoutReply bool
	// Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove reply keyboard or to force a reply from the user.
	ReplyMarkup ReplyMarkup
}

// SendVenue Use this method to send information about a venue. On success, the sent Message is returned.
// - chat_id (type int64): Unique identifier for the target chat or username of the target channel (in the format @channelusername)
// - latitude (type float64): Latitude of the venue
// - longitude (type float64): Longitude of the venue
// - title (type string): Name of the venue
// - address (type string): Address of the venue
// - opts (type SendVenueOpts): All optional parameters.
// https://core.telegram.org/bots/api#sendvenue
func (bot *Bot) SendVenue(chatId int64, latitude float64, longitude float64, title string, address string, opts *SendVenueOpts) (*Message, error) {
	v := urlLib.Values{}
	if chatId != 0 {
		v.Add("chat_id", strconv.FormatInt(chatId, 10))
	}
	if latitude != 0.0 {
		v.Add("latitude", strconv.FormatFloat(latitude, 'f', -1, 64))
	}
	if longitude != 0.0 {
		v.Add("longitude", strconv.FormatFloat(longitude, 'f', -1, 64))
	}
	v.Add("title", title)
	v.Add("address", address)
	if opts != nil {
		v.Add("foursquare_id", opts.FoursquareId)
		v.Add("foursquare_type", opts.FoursquareType)
		v.Add("google_place_id", opts.GooglePlaceId)
		v.Add("google_place_type", opts.GooglePlaceType)
		v.Add("disable_notification", strconv.FormatBool(opts.DisableNotification))
		if opts.ReplyToMessageId != 0 {
			v.Add("reply_to_message_id", strconv.FormatInt(opts.ReplyToMessageId, 10))
		}
		v.Add("allow_sending_without_reply", strconv.FormatBool(opts.AllowSendingWithoutReply))
		if opts.ReplyMarkup != nil {
			bs, err := json.Marshal(opts.ReplyMarkup)
			if err != nil {
				return nil, fmt.Errorf("failed to marshal field reply_markup: %w", err)
			}
			v.Add("reply_markup", string(bs))
		}
	}

	r, err := bot.Get("sendVenue", v)
	if err != nil {
		return nil, err
	}

	var m Message
	return &m, json.Unmarshal(r, &m)
}

// SendVideoOpts is the set of optional fields for Bot.SendVideo.
type SendVideoOpts struct {
	// Duration of sent video in seconds
	Duration int64
	// Video width
	Width int64
	// Video height
	Height int64
	// Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass "attach://<file_attach_name>" if the thumbnail was uploaded using multipart/form-data under <file_attach_name>. More info on Sending Files: https://core.telegram.org/bots/api#sending-files
	Thumb InputFile
	// Video caption (may also be used when resending videos by file_id), 0-1024 characters after entities parsing
	Caption string
	// Mode for parsing entities in the video caption. See formatting options for more details.
	ParseMode string
	// List of special entities that appear in the caption, which can be specified instead of parse_mode
	CaptionEntities []MessageEntity
	// Pass True, if the uploaded video is suitable for streaming
	SupportsStreaming bool
	// Sends the message silently. Users will receive a notification with no sound.
	DisableNotification bool
	// If the message is a reply, ID of the original message
	ReplyToMessageId int64
	// Pass True, if the message should be sent even if the specified replied-to message is not found
	AllowSendingWithoutReply bool
	// Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove reply keyboard or to force a reply from the user.
	ReplyMarkup ReplyMarkup
}

// SendVideo Use this method to send video files, Telegram clients support mp4 videos (other formats may be sent as Document). On success, the sent Message is returned. Bots can currently send video files of up to 50 MB in size, this limit may be changed in the future.
// - chat_id (type int64): Unique identifier for the target chat or username of the target channel (in the format @channelusername)
// - video (type InputFile): Video to send. Pass a file_id as String to send a video that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get a video from the Internet, or upload a new video using multipart/form-data. More info on Sending Files: https://core.telegram.org/bots/api#sending-files
// - opts (type SendVideoOpts): All optional parameters.
// https://core.telegram.org/bots/api#sendvideo
func (bot *Bot) SendVideo(chatId int64, video InputFile, opts *SendVideoOpts) (*Message, error) {
	v := urlLib.Values{}
	data := map[string]NamedReader{}
	if chatId != 0 {
		v.Add("chat_id", strconv.FormatInt(chatId, 10))
	}
	if video != nil {
		switch m := video.(type) {
		case string:
			v.Add("video", m)

		case NamedReader:
			v.Add("video", "attach://video")
			data["video"] = m

		case io.Reader:
			v.Add("video", "attach://video")
			data["video"] = NamedFile{File: m}

		case []byte:
			v.Add("video", "attach://video")
			data["video"] = NamedFile{File: bytes.NewReader(m)}

		default:
			return nil, fmt.Errorf("unknown type for InputFile: %T", video)
		}
	}
	if opts != nil {
		if opts.Duration != 0 {
			v.Add("duration", strconv.FormatInt(opts.Duration, 10))
		}
		if opts.Width != 0 {
			v.Add("width", strconv.FormatInt(opts.Width, 10))
		}
		if opts.Height != 0 {
			v.Add("height", strconv.FormatInt(opts.Height, 10))
		}
		if opts.Thumb != nil {
			switch m := opts.Thumb.(type) {
			case string:
				v.Add("thumb", m)

			case NamedReader:
				v.Add("thumb", "attach://thumb")
				data["thumb"] = m

			case io.Reader:
				v.Add("thumb", "attach://thumb")
				data["thumb"] = NamedFile{File: m}

			case []byte:
				v.Add("thumb", "attach://thumb")
				data["thumb"] = NamedFile{File: bytes.NewReader(m)}

			default:
				return nil, fmt.Errorf("unknown type for InputFile: %T", opts.Thumb)
			}
		}
		v.Add("caption", opts.Caption)
		v.Add("parse_mode", opts.ParseMode)
		if opts.CaptionEntities != nil {
			bs, err := json.Marshal(opts.CaptionEntities)
			if err != nil {
				return nil, fmt.Errorf("failed to marshal field caption_entities: %w", err)
			}
			v.Add("caption_entities", string(bs))
		}
		v.Add("supports_streaming", strconv.FormatBool(opts.SupportsStreaming))
		v.Add("disable_notification", strconv.FormatBool(opts.DisableNotification))
		if opts.ReplyToMessageId != 0 {
			v.Add("reply_to_message_id", strconv.FormatInt(opts.ReplyToMessageId, 10))
		}
		v.Add("allow_sending_without_reply", strconv.FormatBool(opts.AllowSendingWithoutReply))
		if opts.ReplyMarkup != nil {
			bs, err := json.Marshal(opts.ReplyMarkup)
			if err != nil {
				return nil, fmt.Errorf("failed to marshal field reply_markup: %w", err)
			}
			v.Add("reply_markup", string(bs))
		}
	}

	r, err := bot.Post("sendVideo", v, data)
	if err != nil {
		return nil, err
	}

	var m Message
	return &m, json.Unmarshal(r, &m)
}

// SendVideoNoteOpts is the set of optional fields for Bot.SendVideoNote.
type SendVideoNoteOpts struct {
	// Duration of sent video in seconds
	Duration int64
	// Video width and height, i.e. diameter of the video message
	Length int64
	// Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass "attach://<file_attach_name>" if the thumbnail was uploaded using multipart/form-data under <file_attach_name>. More info on Sending Files: https://core.telegram.org/bots/api#sending-files
	Thumb InputFile
	// Sends the message silently. Users will receive a notification with no sound.
	DisableNotification bool
	// If the message is a reply, ID of the original message
	ReplyToMessageId int64
	// Pass True, if the message should be sent even if the specified replied-to message is not found
	AllowSendingWithoutReply bool
	// Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove reply keyboard or to force a reply from the user.
	ReplyMarkup ReplyMarkup
}

// SendVideoNote As of v.4.0, Telegram clients support rounded square mp4 videos of up to 1 minute long. Use this method to send video messages. On success, the sent Message is returned.
// - chat_id (type int64): Unique identifier for the target chat or username of the target channel (in the format @channelusername)
// - video_note (type InputFile): Video note to send. Pass a file_id as String to send a video note that exists on the Telegram servers (recommended) or upload a new video using multipart/form-data. More info on Sending Files: https://core.telegram.org/bots/api#sending-files. Sending video notes by a URL is currently unsupported
// - opts (type SendVideoNoteOpts): All optional parameters.
// https://core.telegram.org/bots/api#sendvideonote
func (bot *Bot) SendVideoNote(chatId int64, videoNote InputFile, opts *SendVideoNoteOpts) (*Message, error) {
	v := urlLib.Values{}
	data := map[string]NamedReader{}
	if chatId != 0 {
		v.Add("chat_id", strconv.FormatInt(chatId, 10))
	}
	if videoNote != nil {
		switch m := videoNote.(type) {
		case string:
			v.Add("video_note", m)

		case NamedReader:
			v.Add("video_note", "attach://video_note")
			data["video_note"] = m

		case io.Reader:
			v.Add("video_note", "attach://video_note")
			data["video_note"] = NamedFile{File: m}

		case []byte:
			v.Add("video_note", "attach://video_note")
			data["video_note"] = NamedFile{File: bytes.NewReader(m)}

		default:
			return nil, fmt.Errorf("unknown type for InputFile: %T", videoNote)
		}
	}
	if opts != nil {
		if opts.Duration != 0 {
			v.Add("duration", strconv.FormatInt(opts.Duration, 10))
		}
		if opts.Length != 0 {
			v.Add("length", strconv.FormatInt(opts.Length, 10))
		}
		if opts.Thumb != nil {
			switch m := opts.Thumb.(type) {
			case string:
				v.Add("thumb", m)

			case NamedReader:
				v.Add("thumb", "attach://thumb")
				data["thumb"] = m

			case io.Reader:
				v.Add("thumb", "attach://thumb")
				data["thumb"] = NamedFile{File: m}

			case []byte:
				v.Add("thumb", "attach://thumb")
				data["thumb"] = NamedFile{File: bytes.NewReader(m)}

			default:
				return nil, fmt.Errorf("unknown type for InputFile: %T", opts.Thumb)
			}
		}
		v.Add("disable_notification", strconv.FormatBool(opts.DisableNotification))
		if opts.ReplyToMessageId != 0 {
			v.Add("reply_to_message_id", strconv.FormatInt(opts.ReplyToMessageId, 10))
		}
		v.Add("allow_sending_without_reply", strconv.FormatBool(opts.AllowSendingWithoutReply))
		if opts.ReplyMarkup != nil {
			bs, err := json.Marshal(opts.ReplyMarkup)
			if err != nil {
				return nil, fmt.Errorf("failed to marshal field reply_markup: %w", err)
			}
			v.Add("reply_markup", string(bs))
		}
	}

	r, err := bot.Post("sendVideoNote", v, data)
	if err != nil {
		return nil, err
	}

	var m Message
	return &m, json.Unmarshal(r, &m)
}

// SendVoiceOpts is the set of optional fields for Bot.SendVoice.
type SendVoiceOpts struct {
	// Voice message caption, 0-1024 characters after entities parsing
	Caption string
	// Mode for parsing entities in the voice message caption. See formatting options for more details.
	ParseMode string
	// List of special entities that appear in the caption, which can be specified instead of parse_mode
	CaptionEntities []MessageEntity
	// Duration of the voice message in seconds
	Duration int64
	// Sends the message silently. Users will receive a notification with no sound.
	DisableNotification bool
	// If the message is a reply, ID of the original message
	ReplyToMessageId int64
	// Pass True, if the message should be sent even if the specified replied-to message is not found
	AllowSendingWithoutReply bool
	// Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove reply keyboard or to force a reply from the user.
	ReplyMarkup ReplyMarkup
}

// SendVoice Use this method to send audio files, if you want Telegram clients to display the file as a playable voice message. For this to work, your audio must be in an .OGG file encoded with OPUS (other formats may be sent as Audio or Document). On success, the sent Message is returned. Bots can currently send voice messages of up to 50 MB in size, this limit may be changed in the future.
// - chat_id (type int64): Unique identifier for the target chat or username of the target channel (in the format @channelusername)
// - voice (type InputFile): Audio file to send. Pass a file_id as String to send a file that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get a file from the Internet, or upload a new one using multipart/form-data. More info on Sending Files: https://core.telegram.org/bots/api#sending-files
// - opts (type SendVoiceOpts): All optional parameters.
// https://core.telegram.org/bots/api#sendvoice
func (bot *Bot) SendVoice(chatId int64, voice InputFile, opts *SendVoiceOpts) (*Message, error) {
	v := urlLib.Values{}
	data := map[string]NamedReader{}
	if chatId != 0 {
		v.Add("chat_id", strconv.FormatInt(chatId, 10))
	}
	if voice != nil {
		switch m := voice.(type) {
		case string:
			v.Add("voice", m)

		case NamedReader:
			v.Add("voice", "attach://voice")
			data["voice"] = m

		case io.Reader:
			v.Add("voice", "attach://voice")
			data["voice"] = NamedFile{File: m}

		case []byte:
			v.Add("voice", "attach://voice")
			data["voice"] = NamedFile{File: bytes.NewReader(m)}

		default:
			return nil, fmt.Errorf("unknown type for InputFile: %T", voice)
		}
	}
	if opts != nil {
		v.Add("caption", opts.Caption)
		v.Add("parse_mode", opts.ParseMode)
		if opts.CaptionEntities != nil {
			bs, err := json.Marshal(opts.CaptionEntities)
			if err != nil {
				return nil, fmt.Errorf("failed to marshal field caption_entities: %w", err)
			}
			v.Add("caption_entities", string(bs))
		}
		if opts.Duration != 0 {
			v.Add("duration", strconv.FormatInt(opts.Duration, 10))
		}
		v.Add("disable_notification", strconv.FormatBool(opts.DisableNotification))
		if opts.ReplyToMessageId != 0 {
			v.Add("reply_to_message_id", strconv.FormatInt(opts.ReplyToMessageId, 10))
		}
		v.Add("allow_sending_without_reply", strconv.FormatBool(opts.AllowSendingWithoutReply))
		if opts.ReplyMarkup != nil {
			bs, err := json.Marshal(opts.ReplyMarkup)
			if err != nil {
				return nil, fmt.Errorf("failed to marshal field reply_markup: %w", err)
			}
			v.Add("reply_markup", string(bs))
		}
	}

	r, err := bot.Post("sendVoice", v, data)
	if err != nil {
		return nil, err
	}

	var m Message
	return &m, json.Unmarshal(r, &m)
}

// SetChatAdministratorCustomTitle Use this method to set a custom title for an administrator in a supergroup promoted by the bot. Returns True on success.
// - chat_id (type int64): Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername)
// - user_id (type int64): Unique identifier of the target user
// - custom_title (type string): New custom title for the administrator; 0-16 characters, emoji are not allowed
// https://core.telegram.org/bots/api#setchatadministratorcustomtitle
func (bot *Bot) SetChatAdministratorCustomTitle(chatId int64, userId int64, customTitle string) (bool, error) {
	v := urlLib.Values{}
	if chatId != 0 {
		v.Add("chat_id", strconv.FormatInt(chatId, 10))
	}
	if userId != 0 {
		v.Add("user_id", strconv.FormatInt(userId, 10))
	}
	v.Add("custom_title", customTitle)

	r, err := bot.Get("setChatAdministratorCustomTitle", v)
	if err != nil {
		return false, err
	}

	var b bool
	return b, json.Unmarshal(r, &b)
}

// SetChatDescriptionOpts is the set of optional fields for Bot.SetChatDescription.
type SetChatDescriptionOpts struct {
	// New chat description, 0-255 characters
	Description string
}

// SetChatDescription Use this method to change the description of a group, a supergroup or a channel. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns True on success.
// - chat_id (type int64): Unique identifier for the target chat or username of the target channel (in the format @channelusername)
// - opts (type SetChatDescriptionOpts): All optional parameters.
// https://core.telegram.org/bots/api#setchatdescription
func (bot *Bot) SetChatDescription(chatId int64, opts *SetChatDescriptionOpts) (bool, error) {
	v := urlLib.Values{}
	if chatId != 0 {
		v.Add("chat_id", strconv.FormatInt(chatId, 10))
	}
	if opts != nil {
		v.Add("description", opts.Description)
	}

	r, err := bot.Get("setChatDescription", v)
	if err != nil {
		return false, err
	}

	var b bool
	return b, json.Unmarshal(r, &b)
}

// SetChatPermissions Use this method to set default chat permissions for all members. The bot must be an administrator in the group or a supergroup for this to work and must have the can_restrict_members admin rights. Returns True on success.
// - chat_id (type int64): Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername)
// - permissions (type ChatPermissions): New default chat permissions
// https://core.telegram.org/bots/api#setchatpermissions
func (bot *Bot) SetChatPermissions(chatId int64, permissions ChatPermissions) (bool, error) {
	v := urlLib.Values{}
	if chatId != 0 {
		v.Add("chat_id", strconv.FormatInt(chatId, 10))
	}
	bs, err := json.Marshal(permissions)
	if err != nil {
		return false, fmt.Errorf("failed to marshal field permissions: %w", err)
	}
	v.Add("permissions", string(bs))

	r, err := bot.Get("setChatPermissions", v)
	if err != nil {
		return false, err
	}

	var b bool
	return b, json.Unmarshal(r, &b)
}

// SetChatPhoto Use this method to set a new profile photo for the chat. Photos can't be changed for private chats. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns True on success.
// - chat_id (type int64): Unique identifier for the target chat or username of the target channel (in the format @channelusername)
// - photo (type InputFile): New chat photo, uploaded using multipart/form-data
// https://core.telegram.org/bots/api#setchatphoto
func (bot *Bot) SetChatPhoto(chatId int64, photo InputFile) (bool, error) {
	v := urlLib.Values{}
	data := map[string]NamedReader{}
	if chatId != 0 {
		v.Add("chat_id", strconv.FormatInt(chatId, 10))
	}
	if photo != nil {
		switch m := photo.(type) {
		case NamedReader:
			v.Add("photo", "attach://photo")
			data["photo"] = m

		case io.Reader:
			v.Add("photo", "attach://photo")
			data["photo"] = NamedFile{File: m}

		case []byte:
			v.Add("photo", "attach://photo")
			data["photo"] = NamedFile{File: bytes.NewReader(m)}

		default:
			return false, fmt.Errorf("unknown type for InputFile: %T", photo)
		}
	}

	r, err := bot.Post("setChatPhoto", v, data)
	if err != nil {
		return false, err
	}

	var b bool
	return b, json.Unmarshal(r, &b)
}

// SetChatStickerSet Use this method to set a new group sticker set for a supergroup. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Use the field can_set_sticker_set optionally returned in getChat requests to check if the bot can use this method. Returns True on success.
// - chat_id (type int64): Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername)
// - sticker_set_name (type string): Name of the sticker set to be set as the group sticker set
// https://core.telegram.org/bots/api#setchatstickerset
func (bot *Bot) SetChatStickerSet(chatId int64, stickerSetName string) (bool, error) {
	v := urlLib.Values{}
	if chatId != 0 {
		v.Add("chat_id", strconv.FormatInt(chatId, 10))
	}
	v.Add("sticker_set_name", stickerSetName)

	r, err := bot.Get("setChatStickerSet", v)
	if err != nil {
		return false, err
	}

	var b bool
	return b, json.Unmarshal(r, &b)
}

// SetChatTitle Use this method to change the title of a chat. Titles can't be changed for private chats. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns True on success.
// - chat_id (type int64): Unique identifier for the target chat or username of the target channel (in the format @channelusername)
// - title (type string): New chat title, 1-255 characters
// https://core.telegram.org/bots/api#setchattitle
func (bot *Bot) SetChatTitle(chatId int64, title string) (bool, error) {
	v := urlLib.Values{}
	if chatId != 0 {
		v.Add("chat_id", strconv.FormatInt(chatId, 10))
	}
	v.Add("title", title)

	r, err := bot.Get("setChatTitle", v)
	if err != nil {
		return false, err
	}

	var b bool
	return b, json.Unmarshal(r, &b)
}

// SetGameScoreOpts is the set of optional fields for Bot.SetGameScore.
type SetGameScoreOpts struct {
	// Pass True, if the high score is allowed to decrease. This can be useful when fixing mistakes or banning cheaters
	Force bool
	// Pass True, if the game message should not be automatically edited to include the current scoreboard
	DisableEditMessage bool
	// Required if inline_message_id is not specified. Unique identifier for the target chat
	ChatId int64
	// Required if inline_message_id is not specified. Identifier of the sent message
	MessageId int64
	// Required if chat_id and message_id are not specified. Identifier of the inline message
	InlineMessageId string
}

// SetGameScore Use this method to set the score of the specified user in a game. On success, if the message was sent by the bot, returns the edited Message, otherwise returns True. Returns an error, if the new score is not greater than the user's current score in the chat and force is False.
// - user_id (type int64): User identifier
// - score (type int64): New score, must be non-negative
// - opts (type SetGameScoreOpts): All optional parameters.
// https://core.telegram.org/bots/api#setgamescore
func (bot *Bot) SetGameScore(userId int64, score int64, opts *SetGameScoreOpts) (*Message, error) {
	v := urlLib.Values{}
	if userId != 0 {
		v.Add("user_id", strconv.FormatInt(userId, 10))
	}
	if score != 0 {
		v.Add("score", strconv.FormatInt(score, 10))
	}
	if opts != nil {
		v.Add("force", strconv.FormatBool(opts.Force))
		v.Add("disable_edit_message", strconv.FormatBool(opts.DisableEditMessage))
		if opts.ChatId != 0 {
			v.Add("chat_id", strconv.FormatInt(opts.ChatId, 10))
		}
		if opts.MessageId != 0 {
			v.Add("message_id", strconv.FormatInt(opts.MessageId, 10))
		}
		v.Add("inline_message_id", opts.InlineMessageId)
	}

	r, err := bot.Get("setGameScore", v)
	if err != nil {
		return nil, err
	}

	var m Message
	return &m, json.Unmarshal(r, &m)
}

// SetMyCommandsOpts is the set of optional fields for Bot.SetMyCommands.
type SetMyCommandsOpts struct {
	// A JSON-serialized object, describing scope of users for which the commands are relevant. Defaults to BotCommandScopeDefault.
	Scope BotCommandScope
	// A two-letter ISO 639-1 language code. If empty, commands will be applied to all users from the given scope, for whose language there are no dedicated commands
	LanguageCode string
}

// SetMyCommands Use this method to change the list of the bot's commands. See https://core.telegram.org/bots#commands for more details about bot commands. Returns True on success.
// - commands (type []BotCommand): A JSON-serialized list of bot commands to be set as the list of the bot's commands. At most 100 commands can be specified.
// - opts (type SetMyCommandsOpts): All optional parameters.
// https://core.telegram.org/bots/api#setmycommands
func (bot *Bot) SetMyCommands(commands []BotCommand, opts *SetMyCommandsOpts) (bool, error) {
	v := urlLib.Values{}
	if commands != nil {
		bs, err := json.Marshal(commands)
		if err != nil {
			return false, fmt.Errorf("failed to marshal field commands: %w", err)
		}
		v.Add("commands", string(bs))
	}
	if opts != nil {
		bs, err := json.Marshal(opts.Scope)
		if err != nil {
			return false, fmt.Errorf("failed to marshal field scope: %w", err)
		}
		v.Add("scope", string(bs))
		v.Add("language_code", opts.LanguageCode)
	}

	r, err := bot.Get("setMyCommands", v)
	if err != nil {
		return false, err
	}

	var b bool
	return b, json.Unmarshal(r, &b)
}

// SetPassportDataErrors Informs a user that some of the Telegram Passport elements they provided contains errors. The user will not be able to re-submit their Passport to you until the errors are fixed (the contents of the field for which you returned the error must change). Returns True on success.
// Use this if the data submitted by the user doesn't satisfy the standards your service requires for any reason. For example, if a birthday date seems invalid, a submitted document is blurry, a scan shows evidence of tampering, etc. Supply some details in the error message to make sure the user knows how to correct the issues.
// - user_id (type int64): User identifier
// - errors (type []PassportElementError): A JSON-serialized array describing the errors
// https://core.telegram.org/bots/api#setpassportdataerrors
func (bot *Bot) SetPassportDataErrors(userId int64, errors []PassportElementError) (bool, error) {
	v := urlLib.Values{}
	if userId != 0 {
		v.Add("user_id", strconv.FormatInt(userId, 10))
	}
	if errors != nil {
		bs, err := json.Marshal(errors)
		if err != nil {
			return false, fmt.Errorf("failed to marshal field errors: %w", err)
		}
		v.Add("errors", string(bs))
	}

	r, err := bot.Get("setPassportDataErrors", v)
	if err != nil {
		return false, err
	}

	var b bool
	return b, json.Unmarshal(r, &b)
}

// SetStickerPositionInSet Use this method to move a sticker in a set created by the bot to a specific position. Returns True on success.
// - sticker (type string): File identifier of the sticker
// - position (type int64): New sticker position in the set, zero-based
// https://core.telegram.org/bots/api#setstickerpositioninset
func (bot *Bot) SetStickerPositionInSet(sticker string, position int64) (bool, error) {
	v := urlLib.Values{}
	v.Add("sticker", sticker)
	if position != 0 {
		v.Add("position", strconv.FormatInt(position, 10))
	}

	r, err := bot.Get("setStickerPositionInSet", v)
	if err != nil {
		return false, err
	}

	var b bool
	return b, json.Unmarshal(r, &b)
}

// SetStickerSetThumbOpts is the set of optional fields for Bot.SetStickerSetThumb.
type SetStickerSetThumbOpts struct {
	// A PNG image with the thumbnail, must be up to 128 kilobytes in size and have width and height exactly 100px, or a TGS animation with the thumbnail up to 32 kilobytes in size; see https://core.telegram.org/animated_stickers#technical-requirements for animated sticker technical requirements. Pass a file_id as a String to send a file that already exists on the Telegram servers, pass an HTTP URL as a String for Telegram to get a file from the Internet, or upload a new one using multipart/form-data. More info on Sending Files: https://core.telegram.org/bots/api#sending-files. Animated sticker set thumbnail can't be uploaded via HTTP URL.
	Thumb InputFile
}

// SetStickerSetThumb Use this method to set the thumbnail of a sticker set. Animated thumbnails can be set for animated sticker sets only. Returns True on success.
// - name (type string): Sticker set name
// - user_id (type int64): User identifier of the sticker set owner
// - opts (type SetStickerSetThumbOpts): All optional parameters.
// https://core.telegram.org/bots/api#setstickersetthumb
func (bot *Bot) SetStickerSetThumb(name string, userId int64, opts *SetStickerSetThumbOpts) (bool, error) {
	v := urlLib.Values{}
	data := map[string]NamedReader{}
	v.Add("name", name)
	if userId != 0 {
		v.Add("user_id", strconv.FormatInt(userId, 10))
	}
	if opts != nil {
		if opts.Thumb != nil {
			switch m := opts.Thumb.(type) {
			case string:
				v.Add("thumb", m)

			case NamedReader:
				v.Add("thumb", "attach://thumb")
				data["thumb"] = m

			case io.Reader:
				v.Add("thumb", "attach://thumb")
				data["thumb"] = NamedFile{File: m}

			case []byte:
				v.Add("thumb", "attach://thumb")
				data["thumb"] = NamedFile{File: bytes.NewReader(m)}

			default:
				return false, fmt.Errorf("unknown type for InputFile: %T", opts.Thumb)
			}
		}
	}

	r, err := bot.Post("setStickerSetThumb", v, data)
	if err != nil {
		return false, err
	}

	var b bool
	return b, json.Unmarshal(r, &b)
}

// SetWebhookOpts is the set of optional fields for Bot.SetWebhook.
type SetWebhookOpts struct {
	// Upload your public key certificate so that the root certificate in use can be checked. See our self-signed guide for details.
	Certificate InputFile
	// The fixed IP address which will be used to send webhook requests instead of the IP address resolved through DNS
	IpAddress string
	// Maximum allowed number of simultaneous HTTPS connections to the webhook for update delivery, 1-100. Defaults to 40. Use lower values to limit the load on your bot's server, and higher values to increase your bot's throughput.
	MaxConnections int64
	// A JSON-serialized list of the update types you want your bot to receive. For example, specify ["message", "edited_channel_post", "callback_query"] to only receive updates of these types. See Update for a complete list of available update types. Specify an empty list to receive all update types except chat_member (default). If not specified, the previous setting will be used. Please note that this parameter doesn't affect updates created before the call to the setWebhook, so unwanted updates may be received for a short period of time.
	AllowedUpdates []string
	// Pass True to drop all pending updates
	DropPendingUpdates bool
}

// SetWebhook Use this method to specify a url and receive incoming updates via an outgoing webhook. Whenever there is an update for the bot, we will send an HTTPS POST request to the specified url, containing a JSON-serialized Update. In case of an unsuccessful request, we will give up after a reasonable amount of attempts. Returns True on success.
// If you'd like to make sure that the Webhook request comes from Telegram, we recommend using a secret path in the URL, e.g. https://www.example.com/<token>. Since nobody else knows your bot's token, you can be pretty sure it's us.
// - url (type string): HTTPS url to send updates to. Use an empty string to remove webhook integration
// - opts (type SetWebhookOpts): All optional parameters.
// https://core.telegram.org/bots/api#setwebhook
func (bot *Bot) SetWebhook(url string, opts *SetWebhookOpts) (bool, error) {
	v := urlLib.Values{}
	data := map[string]NamedReader{}
	v.Add("url", url)
	if opts != nil {
		if opts.Certificate != nil {
			switch m := opts.Certificate.(type) {
			case NamedReader:
				v.Add("certificate", "attach://certificate")
				data["certificate"] = m

			case io.Reader:
				v.Add("certificate", "attach://certificate")
				data["certificate"] = NamedFile{File: m}

			case []byte:
				v.Add("certificate", "attach://certificate")
				data["certificate"] = NamedFile{File: bytes.NewReader(m)}

			default:
				return false, fmt.Errorf("unknown type for InputFile: %T", opts.Certificate)
			}
		}
		v.Add("ip_address", opts.IpAddress)
		if opts.MaxConnections != 0 {
			v.Add("max_connections", strconv.FormatInt(opts.MaxConnections, 10))
		}
		if opts.AllowedUpdates != nil {
			bs, err := json.Marshal(opts.AllowedUpdates)
			if err != nil {
				return false, fmt.Errorf("failed to marshal field allowed_updates: %w", err)
			}
			v.Add("allowed_updates", string(bs))
		}
		v.Add("drop_pending_updates", strconv.FormatBool(opts.DropPendingUpdates))
	}

	r, err := bot.Post("setWebhook", v, data)
	if err != nil {
		return false, err
	}

	var b bool
	return b, json.Unmarshal(r, &b)
}

// StopMessageLiveLocationOpts is the set of optional fields for Bot.StopMessageLiveLocation.
type StopMessageLiveLocationOpts struct {
	// Required if inline_message_id is not specified. Unique identifier for the target chat or username of the target channel (in the format @channelusername)
	ChatId int64
	// Required if inline_message_id is not specified. Identifier of the message with live location to stop
	MessageId int64
	// Required if chat_id and message_id are not specified. Identifier of the inline message
	InlineMessageId string
	// A JSON-serialized object for a new inline keyboard.
	ReplyMarkup InlineKeyboardMarkup
}

// StopMessageLiveLocation Use this method to stop updating a live location message before live_period expires. On success, if the message was sent by the bot, the sent Message is returned, otherwise True is returned.
// - opts (type StopMessageLiveLocationOpts): All optional parameters.
// https://core.telegram.org/bots/api#stopmessagelivelocation
func (bot *Bot) StopMessageLiveLocation(opts *StopMessageLiveLocationOpts) (*Message, error) {
	v := urlLib.Values{}
	if opts != nil {
		if opts.ChatId != 0 {
			v.Add("chat_id", strconv.FormatInt(opts.ChatId, 10))
		}
		if opts.MessageId != 0 {
			v.Add("message_id", strconv.FormatInt(opts.MessageId, 10))
		}
		v.Add("inline_message_id", opts.InlineMessageId)
		bs, err := json.Marshal(opts.ReplyMarkup)
		if err != nil {
			return nil, fmt.Errorf("failed to marshal field reply_markup: %w", err)
		}
		v.Add("reply_markup", string(bs))
	}

	r, err := bot.Get("stopMessageLiveLocation", v)
	if err != nil {
		return nil, err
	}

	var m Message
	return &m, json.Unmarshal(r, &m)
}

// StopPollOpts is the set of optional fields for Bot.StopPoll.
type StopPollOpts struct {
	// A JSON-serialized object for a new message inline keyboard.
	ReplyMarkup InlineKeyboardMarkup
}

// StopPoll Use this method to stop a poll which was sent by the bot. On success, the stopped Poll with the final results is returned.
// - chat_id (type int64): Unique identifier for the target chat or username of the target channel (in the format @channelusername)
// - message_id (type int64): Identifier of the original message with the poll
// - opts (type StopPollOpts): All optional parameters.
// https://core.telegram.org/bots/api#stoppoll
func (bot *Bot) StopPoll(chatId int64, messageId int64, opts *StopPollOpts) (*Poll, error) {
	v := urlLib.Values{}
	if chatId != 0 {
		v.Add("chat_id", strconv.FormatInt(chatId, 10))
	}
	if messageId != 0 {
		v.Add("message_id", strconv.FormatInt(messageId, 10))
	}
	if opts != nil {
		bs, err := json.Marshal(opts.ReplyMarkup)
		if err != nil {
			return nil, fmt.Errorf("failed to marshal field reply_markup: %w", err)
		}
		v.Add("reply_markup", string(bs))
	}

	r, err := bot.Get("stopPoll", v)
	if err != nil {
		return nil, err
	}

	var p Poll
	return &p, json.Unmarshal(r, &p)
}

// UnbanChatMemberOpts is the set of optional fields for Bot.UnbanChatMember.
type UnbanChatMemberOpts struct {
	// Do nothing if the user is not banned
	OnlyIfBanned bool
}

// UnbanChatMember Use this method to unban a previously banned user in a supergroup or channel. The user will not return to the group or channel automatically, but will be able to join via link, etc. The bot must be an administrator for this to work. By default, this method guarantees that after the call the user is not a member of the chat, but will be able to join it. So if the user is a member of the chat they will also be removed from the chat. If you don't want this, use the parameter only_if_banned. Returns True on success.
// - chat_id (type int64): Unique identifier for the target group or username of the target supergroup or channel (in the format @username)
// - user_id (type int64): Unique identifier of the target user
// - opts (type UnbanChatMemberOpts): All optional parameters.
// https://core.telegram.org/bots/api#unbanchatmember
func (bot *Bot) UnbanChatMember(chatId int64, userId int64, opts *UnbanChatMemberOpts) (bool, error) {
	v := urlLib.Values{}
	if chatId != 0 {
		v.Add("chat_id", strconv.FormatInt(chatId, 10))
	}
	if userId != 0 {
		v.Add("user_id", strconv.FormatInt(userId, 10))
	}
	if opts != nil {
		v.Add("only_if_banned", strconv.FormatBool(opts.OnlyIfBanned))
	}

	r, err := bot.Get("unbanChatMember", v)
	if err != nil {
		return false, err
	}

	var b bool
	return b, json.Unmarshal(r, &b)
}

// UnpinAllChatMessages Use this method to clear the list of pinned messages in a chat. If the chat is not a private chat, the bot must be an administrator in the chat for this to work and must have the 'can_pin_messages' admin right in a supergroup or 'can_edit_messages' admin right in a channel. Returns True on success.
// - chat_id (type int64): Unique identifier for the target chat or username of the target channel (in the format @channelusername)
// https://core.telegram.org/bots/api#unpinallchatmessages
func (bot *Bot) UnpinAllChatMessages(chatId int64) (bool, error) {
	v := urlLib.Values{}
	if chatId != 0 {
		v.Add("chat_id", strconv.FormatInt(chatId, 10))
	}

	r, err := bot.Get("unpinAllChatMessages", v)
	if err != nil {
		return false, err
	}

	var b bool
	return b, json.Unmarshal(r, &b)
}

// UnpinChatMessageOpts is the set of optional fields for Bot.UnpinChatMessage.
type UnpinChatMessageOpts struct {
	// Identifier of a message to unpin. If not specified, the most recent pinned message (by sending date) will be unpinned.
	MessageId int64
}

// UnpinChatMessage Use this method to remove a message from the list of pinned messages in a chat. If the chat is not a private chat, the bot must be an administrator in the chat for this to work and must have the 'can_pin_messages' admin right in a supergroup or 'can_edit_messages' admin right in a channel. Returns True on success.
// - chat_id (type int64): Unique identifier for the target chat or username of the target channel (in the format @channelusername)
// - opts (type UnpinChatMessageOpts): All optional parameters.
// https://core.telegram.org/bots/api#unpinchatmessage
func (bot *Bot) UnpinChatMessage(chatId int64, opts *UnpinChatMessageOpts) (bool, error) {
	v := urlLib.Values{}
	if chatId != 0 {
		v.Add("chat_id", strconv.FormatInt(chatId, 10))
	}
	if opts != nil {
		if opts.MessageId != 0 {
			v.Add("message_id", strconv.FormatInt(opts.MessageId, 10))
		}
	}

	r, err := bot.Get("unpinChatMessage", v)
	if err != nil {
		return false, err
	}

	var b bool
	return b, json.Unmarshal(r, &b)
}

// UploadStickerFile Use this method to upload a .PNG file with a sticker for later use in createNewStickerSet and addStickerToSet methods (can be used multiple times). Returns the uploaded File on success.
// - user_id (type int64): User identifier of sticker file owner
// - png_sticker (type InputFile): PNG image with the sticker, must be up to 512 kilobytes in size, dimensions must not exceed 512px, and either width or height must be exactly 512px. More info on Sending Files: https://core.telegram.org/bots/api#sending-files
// https://core.telegram.org/bots/api#uploadstickerfile
func (bot *Bot) UploadStickerFile(userId int64, pngSticker InputFile) (*File, error) {
	v := urlLib.Values{}
	data := map[string]NamedReader{}
	if userId != 0 {
		v.Add("user_id", strconv.FormatInt(userId, 10))
	}
	if pngSticker != nil {
		switch m := pngSticker.(type) {
		case NamedReader:
			v.Add("png_sticker", "attach://png_sticker")
			data["png_sticker"] = m

		case io.Reader:
			v.Add("png_sticker", "attach://png_sticker")
			data["png_sticker"] = NamedFile{File: m}

		case []byte:
			v.Add("png_sticker", "attach://png_sticker")
			data["png_sticker"] = NamedFile{File: bytes.NewReader(m)}

		default:
			return nil, fmt.Errorf("unknown type for InputFile: %T", pngSticker)
		}
	}

	r, err := bot.Post("uploadStickerFile", v, data)
	if err != nil {
		return nil, err
	}

	var f File
	return &f, json.Unmarshal(r, &f)
}
